// Generated by Construct 2, the HTML5 game and app creator :: http://www.scirra.com
var cr = {};
cr.plugins_ = {};
cr.behaviors = {};
(function () {
    cr.seal = function (x) {
        if (Object.seal) return Object.seal(x);
        else return x;
    };
    cr.freeze = function (x) {
        if (Object.freeze) return Object.freeze(x);
        else return x;
    };
    cr.vector2 = function (x, y) {
        this.x = x;
        this.y = y;
        cr.seal(this);
    };
    var v2Proto = cr.vector2.prototype;
    v2Proto.offset = function (px, py) {
        this.x += px;
        this.y += py;
        return this;
    };
    v2Proto.mul = function (px, py) {
        this.x *= px;
        this.y *= py;
        return this;
    };
    cr.segments_intersect = function (a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
        if (Math.max(a1x, a2x) < Math.min(b1x, b2x) || Math.min(a1x, a2x) > Math.max(b1x, b2x) || Math.max(a1y, a2y) < Math.min(b1y, b2y) || Math.min(a1y, a2y) > Math.max(b1y, b2y)) {
            return false;
        }
        var dpx = b1x - a1x + b2x - a2x;
        var dpy = b1y - a1y + b2y - a2y;
        var qax = a2x - a1x;
        var qay = a2y - a1y;
        var qbx = b2x - b1x;
        var qby = b2y - b1y;
        var d = Math.abs(qay * qbx - qby * qax);
        var la = qbx * dpy - qby * dpx;
        var lb = qax * dpy - qay * dpx;
        return Math.abs(la) <= d && Math.abs(lb) <= d;
    };
    cr.rect = function (left, top, right, bottom) {
        this.set(left, top, right, bottom);
        cr.seal(this);
    };
    var rectProto = cr.rect.prototype;
    rectProto.set = function (left, top, right, bottom) {
        this.left = left;
        this.top = top;
        this.right = right;
        this.bottom = bottom;
    };
    rectProto.width = function () {
        return this.right - this.left;
    };
    rectProto.height = function () {
        return this.bottom - this.top;
    };
    rectProto.offset = function (px, py) {
        this.left += px;
        this.top += py;
        this.right += px;
        this.bottom += py;
        return this;
    };
    rectProto.intersects_rect = function (rc) {
        return !(rc.right < this.left || rc.bottom < this.top || rc.left > this.right || rc.top > this.bottom);
    };
    rectProto.contains_pt = function (x, y) {
        return (x >= this.left && x <= this.right) && (y >= this.top && y <= this.bottom);
    };
    cr.quad = function () {
        this.tlx = 0;
        this.tly = 0;
        this.trx = 0;
        this.try_ = 0; // is a keyword otherwise!
        this.brx = 0;
        this.bry = 0;
        this.blx = 0;
        this.bly = 0;
        cr.seal(this);
    };
    var quadProto = cr.quad.prototype;
    quadProto.set_from_rect = function (rc) {
        this.tlx = rc.left;
        this.tly = rc.top;
        this.trx = rc.right;
        this.try_ = rc.top;
        this.brx = rc.right;
        this.bry = rc.bottom;
        this.blx = rc.left;
        this.bly = rc.bottom;
    };
    quadProto.set_from_rotated_rect = function (rc, a) {
        if (a === 0) {
            this.set_from_rect(rc);
        } else {
            var sin_a = Math.sin(a);
            var cos_a = Math.cos(a);
            var left_sin_a = rc.left * sin_a;
            var top_sin_a = rc.top * sin_a;
            var right_sin_a = rc.right * sin_a;
            var bottom_sin_a = rc.bottom * sin_a;
            var left_cos_a = rc.left * cos_a;
            var top_cos_a = rc.top * cos_a;
            var right_cos_a = rc.right * cos_a;
            var bottom_cos_a = rc.bottom * cos_a;
            this.tlx = left_cos_a - top_sin_a;
            this.tly = top_cos_a + left_sin_a;
            this.trx = right_cos_a - top_sin_a;
            this.try_ = top_cos_a + right_sin_a;
            this.brx = right_cos_a - bottom_sin_a;
            this.bry = bottom_cos_a + right_sin_a;
            this.blx = left_cos_a - bottom_sin_a;
            this.bly = bottom_cos_a + left_sin_a;
        }
    };
    quadProto.offset = function (px, py) {
        this.tlx += px;
        this.tly += py;
        this.trx += px;
        this.try_ += py;
        this.brx += px;
        this.bry += py;
        this.blx += px;
        this.bly += py;
        return this;
    };
    quadProto.bounding_box = function (rc) {
        rc.left = Math.min(this.tlx, this.trx, this.brx, this.blx);
        rc.top = Math.min(this.tly, this.try_, this.bry, this.bly);
        rc.right = Math.max(this.tlx, this.trx, this.brx, this.blx);
        rc.bottom = Math.max(this.tly, this.try_, this.bry, this.bly);
    };
    quadProto.contains_pt = function (x, y) {
        var v0x = this.trx - this.tlx;
        var v0y = this.try_ - this.tly;
        var v1x = this.brx - this.tlx;
        var v1y = this.bry - this.tly;
        var v2x = x - this.tlx;
        var v2y = y - this.tly;
        var dot00 = v0x * v0x + v0y * v0y
        var dot01 = v0x * v1x + v0y * v1y
        var dot02 = v0x * v2x + v0y * v2y
        var dot11 = v1x * v1x + v1y * v1y
        var dot12 = v1x * v2x + v1y * v2y
        var invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
        var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        if ((u >= 0.0) && (v > 0.0) && (u + v < 1)) return true;
        v0x = this.blx - this.tlx;
        v0y = this.bly - this.tly;
        var dot00 = v0x * v0x + v0y * v0y
        var dot01 = v0x * v1x + v0y * v1y
        var dot02 = v0x * v2x + v0y * v2y
        invDenom = 1.0 / (dot00 * dot11 - dot01 * dot01);
        u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        return (u >= 0.0) && (v > 0.0) && (u + v < 1);
    };
    quadProto.at = function (i, xory) {
        i = i % 4;
        if (i < 0) i += 4;
        switch (i) {
        case 0:
            return xory ? this.tlx : this.tly;
        case 1:
            return xory ? this.trx : this.try_;
        case 2:
            return xory ? this.brx : this.bry;
        case 3:
            return xory ? this.blx : this.bly;
        default:
            return xory ? this.tlx : this.tly;
        }
    };
    quadProto.midX = function () {
        return (this.tlx + this.trx + this.brx + this.blx) / 4;
    };
    quadProto.midY = function () {
        return (this.tly + this.try_ + this.bry + this.bly) / 4;
    };
    quadProto.intersects_quad = function (rhs) {
        var midx = rhs.midX();
        var midy = rhs.midY();
        if (this.contains_pt(midx, midy)) return true;
        midx = this.midX();
        midy = this.midY();
        if (rhs.contains_pt(midx, midy)) return true;
        var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
        var i, j;
        for (i = 0; i < 4; i++) {
            for (j = 0; j < 4; j++) {
                a1x = this.at(i, true);
                a1y = this.at(i, false);
                a2x = this.at(i + 1, true);
                a2y = this.at(i + 1, false);
                b1x = rhs.at(j, true);
                b1y = rhs.at(j, false);
                b2x = rhs.at(j + 1, true);
                b2y = rhs.at(j + 1, false);
                if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)) return true;
            }
        }
        return false;
    };
    cr.RGB = function (red, green, blue) {
        return Math.max(Math.min(red, 255), 0) | (Math.max(Math.min(green, 255), 0) << 8) | (Math.max(Math.min(blue, 255), 0) << 16);
    };
    cr.shallowCopy = function (a, b, allowOverwrite) {
        var attr;
        for (attr in b) {
            if (b.hasOwnProperty(attr)) {;
                a[attr] = b[attr];
            }
        }
    };
    cr.arrayRemove = function (arr, index) {
        var sliced;
        if (index < 1) arr.shift();
        else {
            sliced = arr.slice(index + 1);
            arr.length = index;
            arr.push.apply(arr, sliced);
        }
    };
    cr.arrayFindRemove = function (arr, item) {
        var index = jQuery.inArray(item, arr);
        if (index >= 0) cr.arrayRemove(arr, index);
    };
    cr.clamp = function (x, a, b) {
        if (x < a) return a;
        else if (x > b) return b;
        else return x;
    };
    cr.to_radians = function (x) {
        return x / (180.0 / Math.PI);
    };
    cr.to_degrees = function (x) {
        return x * (180.0 / Math.PI);
    };
    cr.clamp_angle_degrees = function (a) {
        var angle = a;
        angle %= 360; // now in (-360, 360) range
        if (angle < 0) angle += 360; // now in [0, 360) range
        return angle;
    };
    cr.clamp_angle = function (a) {
        var angle = a;
        angle %= 2 * Math.PI; // now in (-2pi, 2pi) range
        if (angle < 0) angle += 2 * Math.PI; // now in [0, 2pi) range
        return angle;
    };
    cr.to_clamped_degrees = function (x) {
        return cr.clamp_angle_degrees(cr.to_degrees(x));
    };
    cr.to_clamped_radians = function (x) {
        return cr.clamp_angle(cr.to_radians(x));
    };
    cr.angleTo = function (x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        return Math.atan2(dy, dx);
    };
    cr.angleDiff = function (a1, a2) {
        if (a1 === a2) return 0;
        var s1 = Math.sin(a1);
        var c1 = Math.cos(a1);
        var s2 = Math.sin(a2);
        var c2 = Math.cos(a2);
        var n = s1 * s2 + c1 * c2;
        if (n >= 1) return 0;
        if (n <= -1) return Math.PI;
        return Math.acos(n);
    };
    cr.angleRotate = function (start, end, step) {
        var ss = Math.sin(start);
        var cs = Math.cos(start);
        var se = Math.sin(end);
        var ce = Math.cos(end);
        if (Math.acos(ss * se + cs * ce) > step) {
            if (cs * se - ss * ce > 0) return cr.clamp_angle(start + step);
            else return cr.clamp_angle(start - step);
        } else return cr.clamp_angle(end);
    };
    cr.angleClockwise = function (a1, a2) {
        var s1 = Math.sin(a1);
        var c1 = Math.cos(a1);
        var s2 = Math.sin(a2);
        var c2 = Math.cos(a2);
        return c1 * s2 - s1 * c2 <= 0;
    };
    cr.distanceTo = function (x1, y1, x2, y2) {
        var dx = x2 - x1;
        var dy = y2 - y1;
        return Math.sqrt(dx * dx + dy * dy);
    };
    cr.xor = function (x, y) {
        return !x !== !y;
    };
    cr.lerp = function (a, b, x) {
        return a + (b - a) * x;
    };
    cr.ObjectSet = function () {
        this.items = {};
        this.item_count = 0;
        this.values_cache = [];
        this.cache_valid = true;
        cr.seal(this);
    };
    var ObjectSetProto = cr.ObjectSet.prototype;
    ObjectSetProto.contains = function (x) {
        return this.items.hasOwnProperty(x.toString());
    };
    ObjectSetProto.add = function (x) {
        if (!this.contains(x)) {
            this.items[x.toString()] = x;
            this.item_count++;
            this.cache_valid = false;
        }
        return this;
    };
    ObjectSetProto.remove = function (x) {
        if (this.contains(x)) {
            delete this.items[x.toString()];
            this.item_count--;
            this.cache_valid = false;
        }
        return this;
    };
    ObjectSetProto.clear = function () {
        this.items = {};
        this.item_count = 0;
        this.values_cache.length = 0;
        this.cache_valid = true;
        return this;
    };
    ObjectSetProto.isEmpty = function () {
        return this.item_count === 0;
    };
    ObjectSetProto.count = function () {
        return this.item_count;
    };
    ObjectSetProto.values = function () {
        if (!this.cache_valid) {
            this.values_cache.length = 0;
            var i;
            for (i in this.items) {
                if (this.items.hasOwnProperty(i)) this.values_cache.push(this.items[i]);
            }
            this.cache_valid = true;
        }
        return this.values_cache.slice(0);
    };
    cr.KahanAdder = function () {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
        cr.seal(this);
    };
    var KahanProto = cr.KahanAdder.prototype;
    KahanProto.add = function (v) {
        this.y = v - this.c;
        this.t = this.sum + this.y;
        this.c = (this.t - this.sum) - this.y;
        this.sum = this.t;
    };
    KahanProto.reset = function () {
        this.c = 0;
        this.y = 0;
        this.t = 0;
        this.sum = 0;
    };
    cr.regexp_escape = function (text) {
        return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
    };
    cr.CollisionPoly = function (pts_array_) {
        this.pts_cache = [];
        this.set_pts(pts_array_);
        cr.seal(this);
    };
    var CollisionPolyProto = cr.CollisionPoly.prototype;
    CollisionPolyProto.set_pts = function (pts_array_) {
        this.pts_array = pts_array_;
        this.pts_count = pts_array_.length / 2; // x, y, x, y... in array
        this.pts_cache.length = pts_array_.length;
        this.cache_width = -1;
        this.cache_height = -1;
        this.cache_angle = 0;
    };
    CollisionPolyProto.is_empty = function () {
        return !this.pts_array.length;
    };
    CollisionPolyProto.set_from_quad = function (q, offx, offy, w, h) {
        this.pts_cache.length = 8;
        this.pts_count = 4;
        this.pts_cache[0] = q.tlx - offx;
        this.pts_cache[1] = q.tly - offy;
        this.pts_cache[2] = q.trx - offx;
        this.pts_cache[3] = q.try_ - offy;
        this.pts_cache[4] = q.brx - offx;
        this.pts_cache[5] = q.bry - offy;
        this.pts_cache[6] = q.blx - offx;
        this.pts_cache[7] = q.bly - offy;
        this.cache_width = w;
        this.cache_height = h;
    };
    CollisionPolyProto.cache_poly = function (w, h, a) {
        if (this.cache_width === w && this.cache_height === h && this.cache_angle === a) return; // cache up-to-date
        this.cache_width = w;
        this.cache_height = h;
        this.cache_angle = a;
        var i, len, x, y, x_temp;
        var sina = 0;
        var cosa = 1;
        if (a !== 0) {
            sina = Math.sin(a);
            cosa = Math.cos(a);
        }
        for (i = 0, len = this.pts_count; i < len; i++) {
            x = this.pts_array[i * 2] * w;
            y = this.pts_array[i * 2 + 1] * h;
            this.pts_cache[i * 2] = (x * cosa) - (y * sina);
            this.pts_cache[i * 2 + 1] = (y * cosa) + (x * sina);
        }
    };
    CollisionPolyProto.contains_pt = function (a2x, a2y) {
        if (a2x === this.pts_cache[0] && a2y === this.pts_cache[1]) return true;
        var a1x = -this.cache_width * 5 - 1;
        var a1y = -this.cache_height * 5 - 1;
        var a3x = this.cache_width * 5 + 1;
        var a3y = -1;
        var b1x, b1y, b2x, b2y;
        var i, len;
        var count1 = 0,
            count2 = 0;
        for (i = 0, len = this.pts_count; i < len; i++) {
            b1x = this.pts_cache[i * 2];
            b1y = this.pts_cache[i * 2 + 1];
            b2x = this.pts_cache[((i + 1) % len) * 2];
            b2y = this.pts_cache[((i + 1) % len) * 2 + 1];
            if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)) count1++;
            if (cr.segments_intersect(a3x, a3y, a2x, a2y, b1x, b1y, b2x, b2y)) count2++;
        }
        return (count1 % 2 === 1) || (count2 % 2 === 1);
    };
    CollisionPolyProto.intersects_poly = function (rhs, offx, offy) {
        if (this.contains_pt(rhs.pts_cache[0] + offx, rhs.pts_cache[1] + offy)) return true;
        if (rhs.contains_pt(this.pts_cache[0] - offx, this.pts_cache[1] - offy)) return true;
        var i, leni, j, lenj;
        var a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y;
        for (i = 0, leni = this.pts_count; i < leni; i++) {
            a1x = this.pts_cache[i * 2];
            a1y = this.pts_cache[i * 2 + 1];
            a2x = this.pts_cache[((i + 1) % leni) * 2];
            a2y = this.pts_cache[((i + 1) % leni) * 2 + 1];
            for (j = 0, lenj = rhs.pts_count; j < lenj; j++) {
                b1x = rhs.pts_cache[j * 2] + offx;
                b1y = rhs.pts_cache[j * 2 + 1] + offy;
                b2x = rhs.pts_cache[((j + 1) % lenj) * 2] + offx;
                b2y = rhs.pts_cache[((j + 1) % lenj) * 2 + 1] + offy;
                if (cr.segments_intersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y)) return true;
            }
        }
        return false;
    };
}());;
(function () {
    
    cr.createRuntime = function (canvasid) {
        globalRunTime = new cr.runtime(document.getElementById(canvasid));
        return globalRunTime;
    };
    cr.runtime = function (canvas) {
        if (!canvas || !canvas.getContext) return;
        this.canvas = canvas;
        globalCanvas = canvas;
        this.ctx = canvas.getContext("2d");
        canvas["c2runtime"] = this;
        this.width = canvas.width;
        this.height = canvas.height;
        this.redraw = true;
        if (!Date.now) {
            Date.now = function now() {
                return +new Date();
            };
        }
        this.plugins = [];
        this.types = {};
        this.types_by_index = [];
        this.behaviors = [];
        this.layouts = {};
        this.layouts_by_index = [];
        this.eventsheets = {};
        this.eventsheets_by_index = [];
        this.wait_for_textures = []; // for blocking until textures loaded
        this.triggers_to_postinit = [];
        this.all_global_vars = [];
        this.deathRow = new cr.ObjectSet();
        this.dt = 0;
        this.dt1 = 0;
        this.zeroDtCount = 0;
        this.timescale = 1.0;
        this.kahanTime = new cr.KahanAdder();
        this.last_tick_time = 0;
        this.measuring_dt = true;
        this.fps = 0;
        this.last_fps_time = 0;
        this.tickcount = 0;
        this.execcount = 0;
        this.framecount = 0; // for fps
        this.objectcount = 0;
        this.changelayout = null;
        this.destroycallbacks = [];
        this.event_stack = [];
        this.event_stack_index = -1;
        this.pushEventStack(null);
        this.loop_stack = [];
        this.loop_stack_index = -1;
        this.next_uid = 0;
        this.layout_first_tick = true;
        this.objects_to_tick = new cr.ObjectSet();
        this.registered_collisions = [];
        this.temp_poly = new cr.CollisionPoly([]);
        this.activeGroups = {}; // event group activation state
        this.running_layout = null; // currently running layout
        this.layer_canvas = null; // for layers "render-to-texture"
        this.layer_ctx = null;
        this.files_subfolder = ""; // path with project files
        this.html5logo = new Image();
        this.html5logo.src = "images/logo.png"; // only 1kb!
        this.load();
        this.go();
        this.extra = {};
        cr.seal(this);
        
      // Brass Monkey Custom Logic Start
        // Make global functions that controller.js code can call into.
      
    	// I couldn't quite unwind where the instance that has the keyMap is created.
      // Instead I just create a global and set it where the instance onKeyDown/onKeyUp
      // handlers are created.
      // The global var is named 'emulatedKeyInstance'
      var keyMapping = {
        left: 37,
        right: 39,
        flip: 90
      };
      emulatedKeyUp = function(button){
      
        emulatedKeyInstance.keyMap[keyMapping[button]] = false;
        emulatedKeyInstance.triggerKey = keyMapping[button];
        emulatedKeyInstance.eventRan = false;
        emulatedKeyInstance.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, emulatedKeyInstance);
        if (emulatedKeyInstance.eventRan || emulatedKeyInstance.usedKeys[keyMapping[button]]) {
            emulatedKeyInstance.usedKeys[keyMapping[button]] = true;
        }
      }
      
      emulatedKeyDown = function(button){
        if (emulatedKeyInstance.keyMap[keyMapping[button]]) {
            return;
        }
        emulatedKeyInstance.keyMap[keyMapping[button]] = true;
        emulatedKeyInstance.eventRan = emulatedKeyInstance.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, emulatedKeyInstance);
        emulatedKeyInstance.triggerKey = keyMapping[button];
        emulatedKeyInstance.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, emulatedKeyInstance);
        if (emulatedKeyInstance.eventRan) {
            emulatedKeyInstance.usedKeys[keyMapping[button]] = true;
        }
      }
      
      // Start the game if the game hasn't already been started
      // return true if the game just got started otherwise
      // always return false and do nothing if the game has
      // already started      
      var gameStarted = false;
      startGame = function(){
        if(gameStarted){
          return false;
        } else {
          globalRunTime.changelayout = globalLayouts[2];
          gameStarted = true;
          return true;
        }
      }
      // Brass Monkey End
    };
    var runtimeProto = cr.runtime.prototype;
    runtimeProto["setSize"] = function (w, h) {
        this.width = w;
        this.height = h;
        this.redraw = true;
    };
    runtimeProto.load = function () {
        if (!this.ctx) return;;
        var pm = cr.getProjectModel();
        this.name = pm[0];
        this.first_layout = pm[1];
        this.system = new cr.system_object(this);
        var i, len, j, lenj, k, lenk, idstr, m, b;
        var plugin, plugin_ctor;
        for (i = 0, len = pm[2].length; i < len; i++) {
            m = pm[2][i];;
            cr.add_common_aces(m);
            plugin = new m[0](this);
            plugin.singleglobal = m[1];
            plugin.is_world = m[2];
            if (plugin.onCreate) plugin.onCreate(); // opportunity to override default ACEs
            cr.seal(plugin);
            this.plugins.push(plugin);
        }
        pm = cr.getProjectModel();
        for (i = 0, len = pm[3].length; i < len; i++) {
            m = pm[3][i];
            plugin_ctor = m[1];;
            plugin = null;
            for (j = 0, lenj = this.plugins.length; j < lenj; j++) {
                if (this.plugins[j] instanceof plugin_ctor) {
                    plugin = this.plugins[j];
                    break;
                }
            };;
            var type_inst = new plugin.Type(plugin);;
            type_inst.name = m[0];
            if (m[2]) {
                type_inst.texture_file = m[2][0];
                type_inst.texture_filesize = m[2][1];
            }
            if (m[3]) {
                type_inst.animations = m[3];
            }
            type_inst.index = i; // save index in to types array in type
            type_inst.instances = []; // all instances of this type
            type_inst.deadCache = []; // destroyed instances to recycle next create
            type_inst.solstack = [new cr.selection(type_inst)]; // initialise SOL stack with one empty SOL
            type_inst.cur_sol = 0;
            type_inst.default_instance = null;
            type_inst.stale_iids = true;
            type_inst.updateIIDs = cr.type_updateIIDs;
            type_inst.getFirstPicked = cr.type_getFirstPicked;
            type_inst.getPairedInstance = cr.type_getPairedInstance;
            type_inst.getCurrentSol = cr.type_getCurrentSol;
            type_inst.pushCleanSol = cr.type_pushCleanSol;
            type_inst.pushCopySol = cr.type_pushCopySol;
            type_inst.popSol = cr.type_popSol;
            type_inst.getBehaviorByName = cr.type_getBehaviorByName;
            type_inst.getBehaviorIndexByName = cr.type_getBehaviorIndexByName;
            type_inst.behaviors = [];
            for (j = 0, lenj = m[4].length; j < lenj; j++) {
                b = m[4][j];
                var behavior_ctor = b[1];
                var behavior_plugin = null;
                for (k = 0, lenk = this.behaviors.length; k < lenk; k++) {
                    if (this.behaviors[k] instanceof behavior_ctor) {
                        behavior_plugin = this.behaviors[k];
                        break;
                    }
                }
                if (!behavior_plugin) {
                    behavior_plugin = new behavior_ctor(this);
                    behavior_plugin.my_instances = new cr.ObjectSet(); // instances of this behavior
                    if (behavior_plugin.onCreate) behavior_plugin.onCreate();
                    cr.seal(behavior_plugin);
                    this.behaviors.push(behavior_plugin);
                }
                var behavior_type = new behavior_plugin.Type(behavior_plugin, type_inst);
                behavior_type.name = b[0];
                behavior_type.onCreate();
                cr.seal(behavior_type);
                type_inst.behaviors.push(behavior_type);
            }
            type_inst.global = m[5];
            type_inst.onCreate();
            cr.seal(type_inst);
            if (type_inst.name) this.types[type_inst.name] = type_inst;
            this.types_by_index.push(type_inst);
            if (plugin.singleglobal) {
                var instance = new plugin.Instance(type_inst);
                instance.uid = this.next_uid;
                this.next_uid++;
                instance.iid = 0;
                instance.get_iid = cr.inst_get_iid;
                instance.toString = cr.inst_toString;
                instance.properties = m[6];
                instance.onCreate();
                cr.seal(instance);
                type_inst.instances.push(instance);
            }
        }
        globalLayouts = [];
        for (i = 0, len = pm[4].length; i < len; i++) {
            m = pm[4][i];
            var layout = new cr.layout(this, m);
            cr.seal(layout);
            this.layouts[layout.name] = layout;
            this.layouts_by_index.push(layout);
            globalLayouts.push(layout);
        }
        for (i = 0, len = pm[5].length; i < len; i++) {
            m = pm[5][i];
            var sheet = new cr.eventsheet(this, m);
            cr.seal(sheet);
            this.eventsheets[sheet.name] = sheet;
            this.eventsheets_by_index.push(sheet);
        }
        for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
        this.eventsheets_by_index[i].postInit();
        for (i = 0, len = this.triggers_to_postinit.length; i < len; i++)
        this.triggers_to_postinit[i].postInit();
        delete this.triggers_to_postinit;
        this.files_subfolder = pm[6];
        this.pixel_rounding = pm[7];
        this.original_width = pm[8];
        this.original_height = pm[9];
        this.aspect_scale = 1.0;
        this.scale_fullscreen = pm[10];
        this.start_time = Date.now();
    };
    runtimeProto.areAllTexturesLoaded = function () {
        var totalsize = 0;
        var completedsize = 0;
        var ret = true;
        var i, len;
        for (i = 0, len = this.wait_for_textures.length; i < len; i++) {
            var filesize = this.wait_for_textures[i].cr_filesize;
            if (!filesize || filesize <= 0) filesize = 50000;
            totalsize += filesize;
            if (this.wait_for_textures[i].complete) completedsize += filesize;
            else ret = false; // not all textures loaded
        }
        if (totalsize == 0) this.progress = 0;
        else this.progress = (completedsize / totalsize);
        return ret;
    };
    runtimeProto.go = function () {
        if (!this.ctx) return;
        this.progress = 0;
        this.last_progress = -1;
        if (this.areAllTexturesLoaded()) this.go_textures_done();
        else {
            var ms_elapsed = Date.now() - this.start_time;
            if ((ms_elapsed >= 500 && this.html5logo.complete) && this.last_progress != this.progress) {
                this.ctx.clearRect(0, 0, this.width, this.height);
                var mx = this.width / 2;
                var my = this.height / 2;
                var hlw = this.html5logo.width / 2;
                var hlh = this.html5logo.height / 2;
                this.ctx.drawImage(this.html5logo, Math.floor(mx - hlw), Math.floor(my - hlh));
                my += hlh + 12;
                mx -= hlw;
                mx = Math.floor(mx) + 0.5;
                my = Math.floor(my) + 0.5;
                this.ctx.fillStyle = "blue";
                this.ctx.fillRect(mx, my, Math.floor(this.html5logo.width * this.progress), 6);
                this.ctx.strokeStyle = "black";
                this.ctx.strokeRect(mx, my, this.html5logo.width, 6);
                this.ctx.strokeStyle = "white";
                this.ctx.strokeRect(mx - 1, my - 1, this.html5logo.width + 2, 8);
                this.last_progress = this.progress;
            }
            setTimeout((function (self) {
                return function () {
                    self.go();
                };
            })(this), 100);
        }
    };
    runtimeProto.go_textures_done = function () {
        if (this.first_layout) this.layouts[this.first_layout].startRunning();
        else this.layouts_by_index[0].startRunning();;
        this.start_time = Date.now();
        this.last_fps_time = this.start_time; // for counting framerate
        this.tick();
    };
    runtimeProto.tick = function () {;
        this.logic();
        if (this.redraw) {
            this.draw();
            this.redraw = false;
        }
        this.tickcount++;
        this.execcount++;
        this.framecount++;
        var raf = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame;
        if (raf) raf((function (self) {
            return function () {
                self.tick();
            };
        })(this), this.canvas);
        else setTimeout((function (self) {
            return function () {
                self.tick();
            };
        })(this), 16);
    };
    runtimeProto.logic = function () {
        var i, leni, j, lenj, k, lenk, type;
        var cur_time = Date.now();
        if (cur_time - this.last_fps_time >= 1000) // every 1 second
        {
            this.last_fps_time += 1000;
            this.fps = this.framecount;
            this.framecount = 0;
        }
        if (this.measuring_dt) {
            if (this.last_tick_time !== 0) {
                var ms_diff = cur_time - this.last_tick_time;
                if (ms_diff === 0) {
                    this.zeroDtCount++;
                    if (this.zeroDtCout >= 10) this.measuring_dt = false;
                    this.dt1 = 1.0 / 60.0; // 60fps assumed (0.01666...)
                    ;
                } else {
                    this.dt1 = ms_diff / 1000.0; // dt measured in seconds
                    if (this.dt1 > 0.5) this.dt1 = 0;
                    else if (this.dt1 > 0.1) this.dt1 = 0.1;
                }
            }
            this.last_tick_time = cur_time;
        }
        this.dt = this.dt1 * this.timescale;
        this.kahanTime.add(this.dt);
        if (this.scale_fullscreen) {
            var orig_aspect = this.original_width / this.original_height;
            var cur_aspect = this.width / this.height;
            if (cur_aspect > orig_aspect) this.aspect_scale = this.height / this.original_height;
            else {
                this.aspect_scale = this.width / this.original_width;
            }
            if (this.running_layout) {
                this.running_layout.scrollToX(this.running_layout.scrollX);
                this.running_layout.scrollToY(this.running_layout.scrollY);
            }
        }
        this.ClearDeathRow();
        this.system.runWaits();
        if (this.changelayout) {;
            this.running_layout.stopRunning();
            this.changelayout.startRunning();
            for (i = 0, leni = this.types_by_index.length; i < leni; i++) {
                type = this.types_by_index[i];
                if (!type.global && !type.plugin.singleglobal) continue;
                for (j = 0, lenj = type.instances.length; j < lenj; j++) {
                    var inst = type.instances[j];
                    if (inst.onLayoutChange) inst.onLayoutChange();
                }
            }
            this.changelayout = null;
            this.redraw = true;
            this.layout_first_tick = true;
        }
        for (i = 0, leni = this.types_by_index.length; i < leni; i++) {
            type = this.types_by_index[i];
            for (j = 0, lenj = type.instances.length; j < lenj; j++) {
                var inst = type.instances[j];
                if (!inst.behavior_insts) continue;
                for (k = 0, lenk = inst.behavior_insts.length; k < lenk; k++) {
                    inst.behavior_insts[k].tick();
                }
            }
        }
        var tickarr = this.objects_to_tick.values();
        for (i = 0, leni = tickarr.length; i < leni; i++)
        tickarr[i].tick();
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++)
        this.eventsheets_by_index[i].hasRun = false;
        if (this.running_layout.event_sheet) this.running_layout.event_sheet.run();
        this.registered_collisions.length = 0;
        this.layout_first_tick = false;
    };
    runtimeProto.tickMe = function (inst) {
        this.objects_to_tick.add(inst);
    };
    runtimeProto.getDt = function (inst) {
        if (!inst || inst.my_timescale === -1.0) return this.dt;
        return this.dt1 * inst.my_timescale;
    };
    runtimeProto.draw = function () {
        this.running_layout.draw(this.ctx);
    };
    runtimeProto.addDestroyCallback = function (f) {
        if (f) this.destroycallbacks.push(f);
    };
    runtimeProto.DestroyInstance = function (inst) {
        this.deathRow.add(inst);
    };
    runtimeProto.ClearDeathRow = function () {
        var inst, index, type, instances, binst;
        var i, j, leni, lenj;
        var w;
        var arr = this.deathRow.values(); // get array of items from set
        for (i = 0, leni = arr.length; i < leni; i++) {
            inst = arr[i];
            type = inst.type;
            instances = type.instances;
            for (j = 0, lenj = this.destroycallbacks.length; j < lenj; j++)
            this.destroycallbacks[j](inst);
            cr.arrayFindRemove(instances, inst);
            if (inst.layer) {
                cr.arrayRemove(inst.layer.instances, inst.get_zindex());
                inst.layer.zindices_stale = true;
            }
            if (inst.behavior_insts) {
                for (j = 0, lenj = inst.behavior_insts.length; j < lenj; j++) {
                    binst = inst.behavior_insts[j];
                    if (binst.onDestroy) binst.onDestroy();
                    binst.behavior.my_instances.remove(inst);
                }
            }
            this.objects_to_tick.remove(inst);
            for (j = 0, lenj = this.system.waits.length; j < lenj; j++) {
                w = this.system.waits[j];
                if (!w.sols.hasOwnProperty(type.index)) continue;
                cr.arrayFindRemove(w.sols[type.index], inst);
            }
            if (inst.onDestroy) inst.onDestroy();
            this.objectcount--;
            if (type.deadCache.length < 32) type.deadCache.push(inst);
        }
        if (!this.deathRow.isEmpty()) this.redraw = true;
        this.deathRow.clear();
    };
    runtimeProto.createInstance = function (type, layer, sx, sy) {
        return this.createInstanceFromInit(type.default_instance, layer, false, sx, sy);
    };
    runtimeProto.createInstanceFromInit = function (initial_inst, layer, is_startup_instance, sx, sy) {
        var i, len, j, lenj, p;;
        var type = this.types_by_index[initial_inst[1]];;
        var is_world = type.plugin.is_world;;
        var inst;
        var recycled_inst = false;
        if (type.deadCache.length) {
            inst = type.deadCache.pop();
            recycled_inst = true;
            type.plugin.Instance.call(inst, type);
        } else inst = new type.plugin.Instance(type);
        inst.uid = this.next_uid;
        this.next_uid++;
        inst.iid = 0;
        inst.get_iid = cr.inst_get_iid;
        type.stale_iids = true;
        var initial_vars = initial_inst[2];
        if (recycled_inst) {
            for (i = 0, len = initial_vars.length; i < len; i++)
            inst.instance_vars[i] = initial_vars[i];
            for (p in inst.extra) {
                if (inst.extra.hasOwnProperty(p)) delete inst.extra[p];
            }
        } else {
            inst.instance_vars = initial_vars.slice(0);
            inst.extra = {};
        }
        if (is_world) {
            var wm = initial_inst[0];;
            inst.x = typeof sx === "undefined" ? wm[0] : sx;
            inst.y = typeof sy === "undefined" ? wm[1] : sy;
            inst.z = wm[2];
            inst.width = wm[3];
            inst.height = wm[4];
            inst.depth = wm[5];
            inst.angle = wm[6];
            inst.opacity = wm[7];
            inst.hotspotX = wm[8];
            inst.hotspotY = wm[9];
            if (recycled_inst) {
                inst.bbox.set(0, 0, 0, 0);
                inst.bquad.set_from_rect(inst.bbox);
                inst.bbox_changed_callbacks.length = 0;
            } else {
                inst.bbox = new cr.rect(0, 0, 0, 0);
                inst.bquad = new cr.quad();
                inst.bbox_changed_callbacks = [];
                inst.set_bbox_changed = cr.set_bbox_changed;
                inst.add_bbox_changed_callback = cr.add_bbox_changed_callback;
                inst.contains_pt = cr.inst_contains_pt;
                inst.update_bbox = cr.update_bbox;
                inst.get_zindex = cr.inst_get_zindex;
            }
            inst.bbox_changed = true;
            inst.visible = true;
            inst.my_timescale = -1.0;
            inst.layer = layer;
            inst.zindex = layer.instances.length; // will be placed at top of current layer
            this.redraw = true;
        }
        inst.toString = cr.inst_toString;
        var initial_props, binst;
        if (recycled_inst) {
            for (i = 0, len = type.behaviors.length; i < len; i++) {
                var btype = type.behaviors[i];
                binst = inst.behavior_insts[i];
                btype.behavior.Instance.call(binst, btype, inst);
                initial_props = initial_inst[3][i];
                for (j = 0, lenj = initial_props.length; j < lenj; j++)
                binst.properties[j] = initial_props[j];
                binst.onCreate();
                btype.behavior.my_instances.add(inst);
            }
        } else {
            inst.behavior_insts = [];
            for (i = 0, len = type.behaviors.length; i < len; i++) {
                var btype = type.behaviors[i];
                var binst = new btype.behavior.Instance(btype, inst);
                binst.properties = initial_inst[3][i].slice(0);
                binst.onCreate();
                cr.seal(binst);
                inst.behavior_insts.push(binst);
                btype.behavior.my_instances.add(inst);
            }
        }
        initial_props = initial_inst[4];
        if (recycled_inst) {
            for (i = 0, len = initial_props.length; i < len; i++)
            inst.properties[i] = initial_props[i];
        } else inst.properties = initial_props.slice(0);
        type.instances.push(inst);
        if (layer) layer.instances.push(inst);
        this.objectcount++;
        inst.onCreate();
        if (!recycled_inst) cr.seal(inst);
        return inst;
    };
    runtimeProto.getLayerByName = function (layer_name) {
        var i, len;
        for (i = 0, len = this.running_layout.layers.length; i < len; i++) {
            var layer = this.running_layout.layers[i];
            if (layer.name === layer_name) return layer;
        }
        return null;
    };
    runtimeProto.getLayerByNumber = function (index) {
        index = Math.floor(index);
        if (index < 0) index = 0;
        if (index >= this.running_layout.layers.length) index = this.running_layout.layers.length - 1;
        return this.running_layout.layers[index];
    };
    runtimeProto.getLayer = function (l) {
        if (typeof l === "number") return this.getLayerByNumber(l);
        else return this.getLayerByName(l.toString());
    };
    cr.layout = function (runtime, m) {
        this.runtime = runtime;
        this.event_sheet = null;
        this.scrollX = (this.runtime.original_width / 2);
        this.scrollY = (this.runtime.original_height / 2);
        this.scale = 1.0;
        this.name = m[0];
        this.width = m[1];
        this.height = m[2];
        this.unbounded_scrolling = m[3];
        this.sheetname = m[4];
        var lm = m[5];
        var i, len;
        this.layers = [];
        for (i = 0, len = lm.length; i < len; i++) {
            var layer = new cr.layer(this, lm[i]);
            layer.number = i;
            cr.seal(layer);
            this.layers.push(layer);
        }
        var im = m[6];
        this.initial_nonworld = [];
        for (i = 0, len = im.length; i < len; i++) {
            var inst = im[i];
            var type = this.runtime.types_by_index[inst[1]];;
            if (!type.default_instance) type.default_instance = inst;
            this.initial_nonworld.push(inst);
        }
    };
    var layoutProto = cr.layout.prototype;
    layoutProto.startRunning = function () {
        if (this.sheetname) {
            this.event_sheet = this.runtime.eventsheets[this.sheetname];;
        }
        this.runtime.running_layout = this;
        this.scrollX = (this.runtime.original_width / 2);
        this.scrollY = (this.runtime.original_height / 2);
        var i, k, len, lenk, type_instances, inst;
        for (i = 0, len = this.runtime.types_by_index.length; i < len; i++) {
            type_instances = this.runtime.types_by_index[i].instances;
            for (k = 0, lenk = type_instances.length; k < lenk; k++) {
                inst = type_instances[k];
                if (inst.layer) {
                    var num = inst.layer.number;
                    if (num >= this.layers.length) num = this.layers.length - 1;
                    inst.layer = this.layers[num];
                    inst.layer.instances.push(inst);
                    inst.layer.zindices_stale = true;
                }
            }
        }
        for (i = 0, len = this.layers.length; i < len; i++) {
            this.layers[i].createInitialInstances();
        }
        for (i = 0, k = 0, len = this.initial_nonworld.length; i < len; i++) {
            inst = this.runtime.createInstanceFromInit(this.initial_nonworld[i], null, true);
            if (!inst.type.global) {
                this.initial_nonworld[k] = this.initial_nonworld[i];
                k++;
            }
        }
        this.initial_nonworld.length = k;
        this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutStart, null);
    };
    layoutProto.stopRunning = function () {;
        this.runtime.trigger(cr.system_object.prototype.cnds.OnLayoutEnd, null);
        this.runtime.system.waits.length = 0;
        var i, leni, j, lenj;
        var layer_instances, inst;
        for (i = 0, leni = this.layers.length; i < leni; i++) {
            layer_instances = this.layers[i].instances;
            for (j = 0, lenj = layer_instances.length; j < lenj; j++) {
                inst = layer_instances[j];
                if (!inst.type.global) this.runtime.DestroyInstance(inst);
            }
            this.runtime.ClearDeathRow();
            layer_instances.length = 0;
            this.layers[i].zindices_stale = true;
        }
    };
    layoutProto.draw = function (ctx) {
        ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
        var i, len;
        for (i = 0, len = this.layers.length; i < len; i++) {
            if (this.layers[i].visible) this.layers[i].draw(ctx);
        }
    };
    layoutProto.getMinLayerScale = function () {
        var m = this.layers[0].getScale();
        var i, len, l;
        for (i = 1, len = this.layers.length; i < len; i++) {
            l = this.layers[i];
            if (l.parallaxX === 0 && l.parallaxY === 0) continue;
            if (l.getScale() < m) m = l.getScale();
        }
        return m;
    };
    layoutProto.scrollToX = function (x) {
        if (!this.unbounded_scrolling) {
            var widthBoundary = (this.runtime.width * (1 / this.getMinLayerScale()) / 2);
            if (x > this.width - widthBoundary) x = this.width - widthBoundary;
            if (x < widthBoundary) x = widthBoundary;
        }
        if (this.scrollX !== x) {
            this.scrollX = x;
            this.runtime.redraw = true;
        }
    };
    layoutProto.scrollToY = function (y) {
        if (!this.unbounded_scrolling) {
            var heightBoundary = (this.runtime.height * (1 / this.getMinLayerScale()) / 2);
            if (y > this.height - heightBoundary) y = this.height - heightBoundary;
            if (y < heightBoundary) y = heightBoundary;
        }
        if (this.scrollY !== y) {
            this.scrollY = y;
            this.runtime.redraw = true;
        }
    };
    cr.layer = function (layout, m) {
        this.layout = layout;
        this.runtime = layout.runtime;
        this.instances = []; // running instances
        this.scale = 1.0;
        this.viewLeft = 0;
        this.viewRight = 0;
        this.viewTop = 0;
        this.viewBottom = 0;
        this.zindices_stale = false;
        this.name = m[0];
        this.index = m[1];
        this.visible = m[2]; // initially visible
        this.background_color = m[3];
        this.transparent = m[4];
        this.parallaxX = m[5];
        this.parallaxY = m[6];
        this.opacity = m[7];
        this.forceOwnTexture = m[8];
        this.zoomRate = m[9];
        var im = m[10];
        var i, len;
        this.initial_instances = [];
        for (i = 0, len = im.length; i < len; i++) {
            var inst = im[i];
            var type = this.runtime.types_by_index[inst[1]];;
            if (!type.default_instance) type.default_instance = inst;
            this.initial_instances.push(inst);
        }
    };
    var layerProto = cr.layer.prototype;
    layerProto.createInitialInstances = function () {
        var i, k, len, inst;
        for (i = 0, k = 0, len = this.initial_instances.length; i < len; i++) {
            inst = this.runtime.createInstanceFromInit(this.initial_instances[i], this, true);
            if (!inst.type.global) {
                this.initial_instances[k] = this.initial_instances[i];
                k++;
            }
        }
        this.initial_instances.length = k;
    };
    layerProto.updateZIndices = function () {
        if (!this.zindices_stale) return;
        var i, len;
        for (i = 0, len = this.instances.length; i < len; i++) {;
            this.instances[i].zindex = i;
        }
        this.zindices_stale = false;
    };
    layerProto.getScale = function () {
        return ((this.scale * this.layout.scale * this.runtime.aspect_scale) - 1) * this.zoomRate + 1;
    };
    layerProto.draw = function (ctx) {
        var render_offscreen = (this.forceOwnTexture || this.opacity != 1.0);
        var layer_canvas = this.runtime.canvas;
        var layer_ctx = ctx;
        if (render_offscreen) {
            if (!this.runtime.layer_canvas) {
                this.runtime.layer_canvas = document.createElement("canvas");;
                layer_canvas = this.runtime.layer_canvas;
                layer_canvas.width = this.runtime.width;
                layer_canvas.height = this.runtime.height;
                this.runtime.layer_ctx = layer_canvas.getContext("2d");;
            }
            layer_canvas = this.runtime.layer_canvas;
            layer_ctx = this.runtime.layer_ctx;
            if (layer_canvas.width != this.runtime.width) layer_canvas.width = this.runtime.width;
            if (layer_canvas.height != this.runtime.height) layer_canvas.height = this.runtime.height;
            if (this.transparent) layer_ctx.clearRect(0, 0, this.runtime.width, this.runtime.height);
        }
        if (!this.transparent) {
            layer_ctx.fillStyle = this.background_color;
            layer_ctx.fillRect(0, 0, this.runtime.width, this.runtime.height);
        }
        layer_ctx.save();
        var px = this.canvasToLayerX(0);
        var py = this.canvasToLayerY(0);
        if (this.runtime.pixel_rounding) {
            px = Math.round(px);
            py = Math.round(py);
        }
        var myscale = this.getScale();
        this.viewLeft = px;
        this.viewTop = py;
        this.viewRight = px + (this.runtime.width * (1 / myscale));
        this.viewBottom = py + (this.runtime.height * (1 / myscale));
        layer_ctx.scale(myscale, myscale);
        layer_ctx.translate(-px, -py);
        var i, len, inst, bbox;
        for (i = 0, len = this.instances.length; i < len; i++) {
            inst = this.instances[i];
            if (!inst.visible) continue;
            inst.update_bbox();
            bbox = inst.bbox;
            if (bbox.right < this.viewLeft || bbox.bottom < this.viewTop || bbox.left > this.viewRight || bbox.top > this.viewBottom) continue;
            inst.draw(layer_ctx);
        }
        layer_ctx.restore();
        if (render_offscreen) {
            ctx.globalAlpha = this.opacity;
            ctx.drawImage(layer_canvas, 0, 0);
            ctx.globalAlpha = 1.0;
        }
    };
    layerProto.canvasToLayerX = function (ptx) {
        var ox = (this.runtime.width / 2);
        var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
        var invScale = 1 / this.getScale();
        x -= (this.runtime.width * invScale) / 2;
        return x + (ptx * invScale);
    };
    layerProto.canvasToLayerY = function (pty) {
        var oy = (this.runtime.height / 2);
        var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
        var invScale = 1 / this.getScale();
        y -= (this.runtime.height * invScale) / 2;
        return y + (pty * invScale);
    };
    layerProto.layerToCanvasX = function (ptx) {
        var ox = (this.runtime.width / 2);
        var x = ((this.layout.scrollX - ox) * this.parallaxX) + ox;
        var invScale = 1 / this.getScale();
        x -= (this.runtime.width * invScale) / 2;
        return ptx / invScale - x;
    };
    layerProto.layerToCanvasY = function (pty) {
        var oy = (this.runtime.height / 2);
        var y = ((this.layout.scrollY - oy) * this.parallaxY) + oy;
        var invScale = 1 / this.getScale();
        y -= (this.runtime.height * invScale) / 2;
        return pty / invScale - y;
    };
    runtimeProto.flip = function (img) {
        var w = img.width;
        var h = img.height;
        var render_canvas = document.createElement("canvas");
        render_canvas.width = w;
        render_canvas.height = h;
        var render_ctx = render_canvas.getContext("2d");;
        render_ctx.drawImage(img, 0, 0);
        var src = render_ctx.getImageData(0, 0, w, h);
        var dest = render_ctx.createImageData(w, h);
        var elemsPerLine = w * 4;
        var x, y, linestart, srcpixel, destpixel;
        for (y = 0; y < h; y++) {
            for (x = 0; x < w; x++) {
                srcpixel = (y * elemsPerLine) + (x * 4);
                destpixel = (((h - 1) - y) * elemsPerLine) + (x * 4);
                dest.data[destpixel + 0] = src.data[srcpixel + 0];
                dest.data[destpixel + 1] = src.data[srcpixel + 1];
                dest.data[destpixel + 2] = src.data[srcpixel + 2];
                dest.data[destpixel + 3] = src.data[srcpixel + 3];
            }
        }
        render_ctx.putImageData(dest, 0, 0);
        var ret = new Image();
        ret.src = render_canvas.toDataURL();
        return ret;
    };
}());;
(function () {
    cr.eventsheet = function (runtime, m) {
        this.runtime = runtime;
        this.triggers = {};
        this.hasRun = false;
        this.hasTriggered = false;
        this.includes = new cr.ObjectSet(); // all event sheets included by this sheet, at first-level indirection only
        this.name = m[0];
        var em = m[1]; // events model
        this.events = []; // triggers won't make it to this array
        var i, len;
        for (i = 0, len = em.length; i < len; i++)
        this.init_event(em[i], null, this.events);
    };
    var eventSheetProto = cr.eventsheet.prototype;
    eventSheetProto.toString = function () {
        return this.name;
    };
    eventSheetProto.init_event = function (m, parent, nontriggers) {
        switch (m[0]) {
        case 0:
            // event block
            {
                var block = new cr.eventblock(this, parent, m);
                cr.seal(block);
                if (block.is_trigger()) this.init_trigger(block);
                else nontriggers.push(block);
                break;
            }
        case 1:
            // variable
            {
                var v = new cr.eventvariable(this, parent, m);
                cr.seal(v);
                nontriggers.push(v);
                break;
            }
        case 2:
            // include
            {
                var inc = new cr.eventinclude(this, parent, m);
                cr.seal(inc);
                nontriggers.push(inc);
                break;
            }
        default:
            ;
        }
    };
    eventSheetProto.postInit = function () {
        var i, len;
        for (i = 0, len = this.events.length; i < len; i++) {
            this.events[i].postInit();
        }
    };
    eventSheetProto.run = function () {
        this.hasRun = true;
        var i, len;
        for (i = 0, len = this.events.length; i < len; i++) {
            var ev = this.events[i];
            ev.run();
            this.runtime.clearSol(ev.solModifiers);
        }
    };
    cr.selection = function (type) {
        this.type = type;
        this.instances = []; // subset of picked instances
        this.select_all = true;
    };
    var solProto = cr.selection.prototype;
    solProto.hasObjects = function () {
        if (this.select_all) return this.type.instances.length;
        else return this.instances.length;
    };
    solProto.getObjects = function () {
        if (this.select_all) return this.type.instances;
        else return this.instances;
    };
    solProto.pick = function (inst) {;
        if (this.select_all) {
            this.select_all = false;
            this.instances.length = 1;
            this.instances[0] = inst;
        } else {
            if (jQuery.inArray(inst, this.instances) === -1) this.instances.push(inst);
        }
    };
    var runtimeProto = cr.runtime.prototype;
    runtimeProto.clearSol = function (solModifiers) {
        var i, len;
        for (i = 0, len = solModifiers.length; i < len; i++) {
            solModifiers[i].getCurrentSol().select_all = true;
        }
    };
    runtimeProto.pushCleanSol = function (solModifiers) {
        var i, len;
        for (i = 0, len = solModifiers.length; i < len; i++) {
            solModifiers[i].pushCleanSol();
        }
    };
    runtimeProto.pushCopySol = function (solModifiers) {
        var i, len;
        for (i = 0, len = solModifiers.length; i < len; i++) {
            solModifiers[i].pushCopySol();
        }
    };
    runtimeProto.popSol = function (solModifiers) {
        var i, len;
        for (i = 0, len = solModifiers.length; i < len; i++) {
            solModifiers[i].popSol();
        }
    };
    cr.eventblock = function (sheet, parent, m) {
        this.sheet = sheet;
        this.parent = parent;
        this.runtime = sheet.runtime;
        this.solModifiers = [];
        this.solWriterAfterCnds = false; // block does not change SOL after running its conditions
        ;
        this.conditions = [];
        this.actions = [];
        this.subevents = [];
        if (m[1]) {
            this.group_name = m[1][1];
            if (m[1][0]) this.runtime.activeGroups[this.group_name] = true;
        }
        var i, len;
        var cm = m[2];
        for (i = 0, len = cm.length; i < len; i++) {
            var cnd = new cr.condition(this, cm[i]);
            cr.seal(cnd);
            this.conditions.push(cnd);
            this.addSolModifier(cnd.type);
        }
        var am = m[3];
        for (i = 0, len = am.length; i < len; i++) {
            var act = new cr.action(this, am[i]);
            cr.seal(act);
            this.actions.push(act);
        }
        if (m.length === 5) {
            var em = m[4];
            for (i = 0, len = em.length; i < len; i++)
            this.sheet.init_event(em[i], this, this.subevents);
        }
    };
    var eventblockProto = cr.eventblock.prototype;
    eventblockProto.postInit = function () {
        var i, len;
        for (i = 0, len = this.conditions.length; i < len; i++)
        this.conditions[i].postInit();
        for (i = 0, len = this.actions.length; i < len; i++)
        this.actions[i].postInit();
        for (i = 0, len = this.subevents.length; i < len; i++)
        this.subevents[i].postInit();
    }
    eventblockProto.addSolModifier = function (type) {
        if (!type) return;
        if (jQuery.inArray(type, this.solModifiers) === -1) this.solModifiers.push(type);
    };
    eventblockProto.setSolWriterAfterCnds = function () {
        this.solWriterAfterCnds = true;
        if (this.parent) this.parent.setSolWriterAfterCnds();
    };
    eventblockProto.is_trigger = function () {
        if (!this.conditions.length) // no conditions
        return false;
        else return this.conditions[0].trigger;
    };
    eventblockProto.run = function () {
        var i, len;
        var evinfo = this.runtime.getCurrentEventStack();
        evinfo.current_event = this;
        for (evinfo.cndindex = 0, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++) {
            if (!this.conditions[evinfo.cndindex].run()) // condition failed
            return false; // bail out
        }
        this.run_actions_and_subevents();
    };
    eventblockProto.run_actions_and_subevents = function () {
        var evinfo = this.runtime.getCurrentEventStack();
        var len;
        for (evinfo.actindex = 0, len = this.actions.length; evinfo.actindex < len; evinfo.actindex++) {
            if (this.actions[evinfo.actindex].run()) return;
        }
        this.run_subevents();
    };
    eventblockProto.resume_actions_and_subevents = function () {
        var evinfo = this.runtime.getCurrentEventStack();
        var len;
        for (len = this.actions.length; evinfo.actindex < len; evinfo.actindex++) {
            if (this.actions[evinfo.actindex].run()) return;
        }
        this.run_subevents();
    };
    eventblockProto.run_subevents = function () {
        if (!this.subevents.length) return;
        var i, len, subev, pushpop;
        var last = this.subevents.length - 1;
        if (this.solWriterAfterCnds) {
            for (i = 0, len = this.subevents.length; i < len; i++) {
                subev = this.subevents[i];
                pushpop = (!this.group && i < last);
                if (pushpop) this.runtime.pushCopySol(subev.solModifiers);
                subev.run();
                if (pushpop) this.runtime.popSol(subev.solModifiers);
                else this.runtime.clearSol(subev.solModifiers);
            }
        } else {
            for (i = 0, len = this.subevents.length; i < len; i++) {
                this.subevents[i].run();
            }
        }
    };
    eventblockProto.run_pretrigger = function () {
        var i, len;
        for (i = 0, len = this.conditions.length; i < len; i++) {;
            if (!this.conditions[i].run()) // condition failed
            return false; // bail out
        }
        return true;
    };
    eventblockProto.retrigger = function () {
        this.runtime.execcount++;
        var prevcndindex = this.runtime.getCurrentEventStack().cndindex;
        var len;
        var evinfo = this.runtime.pushEventStack(this);
        for (evinfo.cndindex = prevcndindex + 1, len = this.conditions.length; evinfo.cndindex < len; evinfo.cndindex++) {
            if (!this.conditions[evinfo.cndindex].run()) // condition failed
            {
                this.runtime.popEventStack(); // moving up level of recursion
                return false; // bail out
            }
        }
        this.run_actions_and_subevents();
        this.runtime.popEventStack();
    };
    cr.condition = function (block, m) {
        this.block = block;
        this.sheet = block.sheet;
        this.runtime = block.runtime;
        this.parameters = [];
        this.results = [];
        this.extra = {}; // for plugins to stow away some custom info
        this.func = m[1];;
        this.trigger = m[3];
        this.looping = m[4];
        this.inverted = m[5];
        this.isstatic = m[6];
        if (m[0] === -1) // system object
        {
            this.type = null;
            this.run = this.run_system;
        } else {
            this.type = this.runtime.types_by_index[m[0]];;
            if (this.isstatic) this.run = this.run_static;
            else this.run = this.run_object;
            if (m[2]) {
                this.behaviortype = this.type.getBehaviorByName(m[2]);;
                this.beh_index = this.type.getBehaviorIndexByName(m[2]);;
            } else {
                this.behaviortype = null;
                this.beh_index = -1;
            }
            if (this.block.parent) this.block.parent.setSolWriterAfterCnds();
        }
        if (m.length === 8) {
            var i, len;
            var em = m[7];
            for (i = 0, len = em.length; i < len; i++) {
                var param = new cr.parameter(this, em[i]);
                cr.seal(param);
                this.parameters.push(param);
            }
            this.results.length = em.length;
        }
    };
    var conditionProto = cr.condition.prototype;
    conditionProto.postInit = function () {
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++)
        this.parameters[i].postInit();
    };
    conditionProto.run_system = function () {
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++)
        this.results[i] = this.parameters[i].get();
        return cr.xor(this.func.apply(this.runtime.system, this.results), this.inverted);
    };
    conditionProto.run_static = function () {
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++)
        this.results[i] = this.parameters[i].get();
        return this.func.apply(this.type, this.results);
    };
    conditionProto.run_object = function () {
        var i, j, leni, lenj, ret, inst;
        var sol = this.type.getCurrentSol();
        if (sol.select_all) {
            sol.instances.length = 0; // clear contents
            for (i = 0, leni = this.type.instances.length; i < leni; i++) {
                inst = this.type.instances[i];;
                for (j = 0, lenj = this.parameters.length; j < lenj; j++)
                this.results[j] = this.parameters[j].get(i); // default SOL index is current object
                if (this.beh_index > -1) ret = this.func.apply(inst.behavior_insts[this.beh_index], this.results);
                else ret = this.func.apply(inst, this.results);
                if (cr.xor(ret, this.inverted)) sol.instances.push(inst);
            }
            sol.select_all = false;
        } else {
            var k = 0;
            for (i = 0, leni = sol.instances.length; i < leni; i++) {
                inst = sol.instances[i];;
                for (j = 0, lenj = this.parameters.length; j < lenj; j++)
                this.results[j] = this.parameters[j].get(i); // default SOL index is current object
                if (this.beh_index > -1) ret = this.func.apply(inst.behavior_insts[this.beh_index], this.results);
                else ret = this.func.apply(inst, this.results);
                if (cr.xor(ret, this.inverted)) {
                    sol.instances[k] = inst;
                    k++;
                }
            }
            sol.instances.length = k;
        }
        return sol.hasObjects();
    };
    cr.action = function (block, m) {
        this.block = block;
        this.sheet = block.sheet;
        this.runtime = block.runtime;
        this.parameters = [];
        this.results = [];
        this.extra = {}; // for plugins to stow away some custom info
        this.func = m[1];;
        if (m[0] === -1) // system
        {
            this.type = null;
            this.run = this.run_system;
        } else {
            this.type = this.runtime.types_by_index[m[0]];;
            this.run = this.run_object;
            if (m[2]) {
                this.behaviortype = this.type.getBehaviorByName(m[2]);;
                this.beh_index = this.type.getBehaviorIndexByName(m[2]);;
            } else {
                this.behaviortype = null;
                this.beh_index = -1;
            }
        }
        if (m.length === 4) {
            var i, len;
            var em = m[3];
            for (i = 0, len = em.length; i < len; i++) {
                var param = new cr.parameter(this, em[i]);
                cr.seal(param);
                this.parameters.push(param);
            }
            this.results.length = em.length;
        }
    };
    var actionProto = cr.action.prototype;
    actionProto.postInit = function () {
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++)
        this.parameters[i].postInit();
    };
    actionProto.run_system = function () {
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++)
        this.results[i] = this.parameters[i].get();
        return this.func.apply(this.runtime.system, this.results);
    };
    actionProto.run_object = function () {
        var instances = this.type.getCurrentSol().getObjects();
        var i, j, leni, lenj;
        for (i = 0, leni = instances.length; i < leni; i++) {
            for (j = 0, lenj = this.parameters.length; j < lenj; j++)
            this.results[j] = this.parameters[j].get(i); // pass i to use as default SOL index
            if (this.beh_index > -1) this.func.apply(instances[i].behavior_insts[this.beh_index], this.results);
            else this.func.apply(instances[i], this.results);
        }
        return false;
    };
    cr.parameter = function (owner, m) {
        this.owner = owner;
        this.block = owner.block;
        this.sheet = owner.sheet;
        this.runtime = owner.runtime;
        this.type = m[0];
        switch (m[0]) {
        case 0:
            // number
        case 1:
            // string
        case 7:
            // any
            this.expression = new cr.expNode(this, m[1]);
            this.solindex = 0;
            this.get = this.get_exp;
            this.temp = new cr.expvalue();
            break;
        case 5:
            // layer
            this.expression = new cr.expNode(this, m[1]);
            this.solindex = 0;
            this.get = this.get_layer;
            this.temp = new cr.expvalue();
            break;
        case 3:
            // combo
        case 8:
            // cmp
            this.combosel = m[1];
            this.get = this.get_combosel;
            break;
        case 6:
            // layout
            this.layout = this.runtime.layouts[m[1]];;
            this.get = this.get_layout;
            break;
        case 9:
            // keyb
            this.key = m[1];
            this.get = this.get_key;
            break;
        case 4:
            // object
            this.object = this.runtime.types_by_index[m[1]];;
            this.get = this.get_object;
            this.block.addSolModifier(this.object);
            if (this.owner instanceof cr.action) this.block.setSolWriterAfterCnds();
            else if (this.block.parent) this.block.parent.setSolWriterAfterCnds();
            break;
        case 10:
            // instvar
            this.index = m[1];
            this.get = this.get_instvar;
            break;
        case 11:
            // eventvar
            this.varname = m[1];
            this.eventvar = null;
            this.get = this.get_eventvar;
            break;
        case 2:
            // audiofile
            this.file = m[1];
            this.get = this.get_audiofile;
            break;
        default:
            ;
        }
    };
    var parameterProto = cr.parameter.prototype;
    parameterProto.postInit = function () {
        if (this.type === 11) // eventvar
        {
            this.eventvar = this.runtime.getEventVariableByName(this.varname, this.block.parent);;
        }
        if (this.expression) this.expression.postInit();
    };
    parameterProto.get_exp = function (solindex) {
        this.solindex = solindex || 0; // default SOL index to use
        this.expression.get(this.temp)
        return this.temp.data; // return actual JS value, not expvalue
    };
    parameterProto.get_object = function () {
        return this.object;
    };
    parameterProto.get_combosel = function () {
        return this.combosel;
    };
    parameterProto.get_layer = function (solindex) {
        this.solindex = solindex || 0; // default SOL index to use
        this.expression.get(this.temp)
        if (this.temp.is_number()) return this.runtime.getLayerByNumber(this.temp.data);
        else return this.runtime.getLayerByName(this.temp.data);
    }
    parameterProto.get_layout = function () {
        return this.layout;
    };
    parameterProto.get_key = function () {
        return this.key;
    };
    parameterProto.get_instvar = function () {
        return this.index;
    };
    parameterProto.get_eventvar = function () {
        return this.eventvar;
    };
    parameterProto.get_audiofile = function () {
        return this.file;
    };
    cr.eventvariable = function (sheet, parent, m) {
        this.sheet = sheet;
        this.parent = parent;
        this.runtime = sheet.runtime;
        this.solModifiers = [];
        if (!this.parent) // global var
        this.runtime.all_global_vars.push(this);
        this.name = m[1];
        this.vartype = m[2];
        this.initial = m[3];
        this.data = this.initial;
    };
    var eventvariableProto = cr.eventvariable.prototype;
    eventvariableProto.postInit = function () {};
    eventvariableProto.run = function () {
        if (this.parent) this.data = this.initial;
    };
    cr.eventinclude = function (sheet, parent, m) {
        this.sheet = sheet;
        this.parent = parent;
        this.runtime = sheet.runtime;
        this.solModifiers = [];
        this.include_sheet = null; // determined in postInit
        this.include_sheet_name = m[1];
    };
    var eventincludeProto = cr.eventinclude.prototype;
    eventincludeProto.postInit = function () {
        this.include_sheet = this.runtime.eventsheets[this.include_sheet_name];;;
        this.sheet.includes.add(this.include_sheet);
    };
    eventincludeProto.run = function () {
        if (this.parent) this.runtime.pushCleanSol(this.runtime.types_by_index);
        if (!this.include_sheet.hasRun) this.include_sheet.run();
        if (this.parent) this.runtime.popSol(this.runtime.types_by_index);
    };
    runtimeProto.testAndSelectCanvasPointOverlap = function (type, ptx, pty, inverted) {
        var sol = type.getCurrentSol();
        var i, j, inst, len;
        var lx, ly;
        if (sol.select_all) {
            if (!inverted) {
                sol.select_all = false;
                sol.instances.length = 0; // clear contents
            }
            for (i = 0, len = type.instances.length; i < len; i++) {
                inst = type.instances[i];
                inst.update_bbox();
                lx = inst.layer.canvasToLayerX(ptx);
                ly = inst.layer.canvasToLayerY(pty);
                if (inst.contains_pt(lx, ly)) {
                    if (inverted) return false;
                    else sol.instances.push(inst);
                }
            }
        } else {
            j = 0;
            for (i = 0, len = sol.instances.length; i < len; i++) {
                inst = sol.instances[i];
                inst.update_bbox();
                lx = inst.layer.canvasToLayerX(ptx);
                ly = inst.layer.canvasToLayerY(pty);
                if (inst.contains_pt(lx, ly)) {
                    if (inverted) return false;
                    else {
                        sol.instances[j] = sol.instances[i];
                        j++;
                    }
                }
            }
            if (!inverted) sol.instances.length = j;
        }
        if (inverted) return true; // did not find anything overlapping
        else return sol.hasObjects();
    };
    runtimeProto.isInstanceYFlipped = function (inst) {
        var a = cr.clamp_angle(inst.angle);
        return (inst.autoMirror && (a > (Math.PI / 2) && a <= ((Math.PI * 3) / 2))) || (inst.autoFlip && a >= Math.PI);
    };
    runtimeProto.testOverlap = function (a, b) {
        if (!a || !b) return false;
        if (a === b) return false;
        a.update_bbox();
        b.update_bbox();
        if (!a.bbox.intersects_rect(b.bbox)) return false;
        if (!a.bquad.intersects_quad(b.bquad)) return false;
        var haspolya = (a.collision_poly && !a.collision_poly.is_empty());
        var haspolyb = (b.collision_poly && !b.collision_poly.is_empty());
        if (!haspolya && !haspolyb) return true;
        var polya, polyb;
        if (haspolya) {
            a.collision_poly.cache_poly(a.width, a.height * (this.isInstanceYFlipped(a) ? -1 : 1), a.angle);
            polya = a.collision_poly;
        } else {
            this.temp_poly.set_from_quad(a.bquad, a.x, a.y, a.width, a.height);
            polya = this.temp_poly;
        }
        if (haspolyb) {
            b.collision_poly.cache_poly(b.width, b.height * (this.isInstanceYFlipped(b) ? -1 : 1), b.angle);
            polyb = b.collision_poly;
        } else {
            this.temp_poly.set_from_quad(b.bquad, b.x, b.y, b.width, b.height);
            polyb = this.temp_poly;
        }
        return polya.intersects_poly(polyb, b.x - a.x, b.y - a.y);
    };
    runtimeProto.testOverlapSolid = function (inst) {
        var solid = null;
        var i, len, s;
        if (!cr.behaviors.solid) return null;
        for (i = 0, len = this.behaviors.length; i < len; i++) {
            if (this.behaviors[i] instanceof cr.behaviors.solid) {
                solid = this.behaviors[i];
                break;
            }
        }
        if (!solid) return null;
        var solids = solid.my_instances.values();
        for (i = 0, len = solids.length; i < len; ++i) {
            s = solids[i];
            if (this.testOverlap(inst, s)) return s;
        }
        return null;
    };
    runtimeProto.pushOutSolid = function (inst, xdir, ydir, dist) {
        var push_dist = dist || 50;
        var oldx = inst.x
        var oldy = inst.y;
        var i;
        var last_overlapped = null;
        for (i = 0; i < push_dist; i++) {
            inst.x = Math.floor(oldx + (xdir * i));
            inst.y = Math.floor(oldy + (ydir * i));
            inst.set_bbox_changed();
            if (!this.testOverlap(inst, last_overlapped)) {
                last_overlapped = this.testOverlapSolid(inst);
                if (!last_overlapped) return true;
            }
        }
        inst.x = oldx;
        inst.y = oldy;
        inst.set_bbox_changed();
        return false;
    };
    runtimeProto.pushOutSolidNearest = function (inst, max_dist_) {
        var max_dist = (typeof max_dist_ === "undefined" ? 100 : max_dist_);
        var dist = 0;
        var oldx = inst.x
        var oldy = inst.y;
        var dir = 0;
        var dx = 0,
            dy = 0;
        var last_overlapped = null;
        while (dist <= max_dist) {
            switch (dir) {
            case 0:
                dx = 0;
                dy = -1;
                dist++;
                break;
            case 1:
                dx = 1;
                dy = -1;
                break;
            case 2:
                dx = 1;
                dy = 0;
                break;
            case 3:
                dx = 1;
                dy = 1;
                break;
            case 4:
                dx = 0;
                dy = 1;
                break;
            case 5:
                dx = -1;
                dy = 1;
                break;
            case 6:
                dx = -1;
                dy = 0;
                break;
            case 7:
                dx = -1;
                dy = -1;
                break;
            }
            dir = (dir + 1) % 8;
            inst.x = Math.floor(oldx + (dx * dist));
            inst.y = Math.floor(oldy + (dy * dist));
            inst.set_bbox_changed();
            if (!this.testOverlap(inst, last_overlapped)) {
                last_overlapped = this.testOverlapSolid(inst);
                if (!last_overlapped) return true;
            }
        }
        inst.x = oldx;
        inst.y = oldy;
        inst.set_bbox_changed();
        return false;
    };
    runtimeProto.registerCollision = function (a, b) {
        this.registered_collisions.push([a, b]);
    };
    runtimeProto.checkRegisteredCollision = function (a, b) {
        var i, len, x;
        for (i = 0, len = this.registered_collisions.length; i < len; i++) {
            x = this.registered_collisions[i];
            if ((x[0] == a && x[1] == b) || (x[0] == b && x[1] == a)) return true;
        }
        return false;
    };
    runtimeProto.calculateSolidBounceAngle = function (inst, startx, starty, obj) {
        var objx = inst.x;
        var objy = inst.y;
        var radius = cr.distanceTo(startx, starty, objx, objy);
        var startangle = cr.angleTo(startx, starty, objx, objy);
        var firstsolid = obj || this.testOverlapSolid(inst);
        if (!firstsolid) return cr.clamp_angle(startangle + Math.PI);
        var cursolid = firstsolid;
        var i, curangle, anticlockwise_free_angle, clockwise_free_angle;
        var increment = cr.to_radians(5); // 5 degree increments
        for (i = 1; i < 36; i++) {
            curangle = startangle - i * increment;
            inst.x = startx + Math.cos(curangle) * radius;
            inst.y = starty + Math.sin(curangle) * radius;
            inst.set_bbox_changed();
            if (!this.testOverlap(inst, cursolid)) {
                cursolid = obj ? null : this.testOverlapSolid(inst);
                if (!cursolid) {
                    anticlockwise_free_angle = curangle;
                    break;
                }
            }
        }
        if (i === 36) anticlockwise_free_angle = cr.clamp_angle(startangle + Math.PI);
        var cursolid = firstsolid;
        for (i = 1; i < 36; i++) {
            curangle = startangle + i * increment;
            inst.x = startx + Math.cos(curangle) * radius;
            inst.y = starty + Math.sin(curangle) * radius;
            inst.set_bbox_changed();
            if (!this.testOverlap(inst, cursolid)) {
                cursolid = obj ? null : this.testOverlapSolid(inst);
                if (!cursolid) {
                    clockwise_free_angle = curangle;
                    break;
                }
            }
        }
        if (i === 36) clockwise_free_angle = cr.clamp_angle(startangle + Math.PI);
        inst.x = objx;
        inst.y = objy;
        inst.set_bbox_changed();
        if (clockwise_free_angle === anticlockwise_free_angle) return clockwise_free_angle;
        var half_diff = cr.angleDiff(clockwise_free_angle, anticlockwise_free_angle) / 2;
        var normal;
        if (cr.angleClockwise(clockwise_free_angle, anticlockwise_free_angle)) {
            normal = cr.clamp_angle(anticlockwise_free_angle + half_diff + Math.PI);
        } else {
            normal = cr.clamp_angle(clockwise_free_angle + half_diff);
        };
        var vx = Math.cos(startangle);
        var vy = Math.sin(startangle);
        var nx = Math.cos(normal);
        var ny = Math.sin(normal);
        var v_dot_n = vx * nx + vy * ny;
        var rx = vx - 2 * v_dot_n * nx;
        var ry = vy - 2 * v_dot_n * ny;
        return cr.angleTo(0, 0, rx, ry);
    };
    eventSheetProto.init_trigger = function (trig) {;
        this.runtime.triggers_to_postinit.push(trig);
        var type_name;
        if (trig.conditions[0].type) type_name = trig.conditions[0].type.name;
        else type_name = "system";
        if (!this.triggers[type_name]) this.triggers[type_name] = [];
        var obj_entry = this.triggers[type_name];
        var method = trig.conditions[0].func;
        var i, len;
        for (i = 0, len = obj_entry.length; i < len; i++) {
            if (obj_entry[i].method == method) {
                obj_entry[i].evs.push(trig);
                return;
            }
        }
        obj_entry.push({
            method: method,
            evs: [trig]
        });
    };
    runtimeProto.trigger = function (method, inst) {;
        if (!this.running_layout) return false;
        var sheet = this.running_layout.event_sheet;
        if (!sheet) return false; // no event sheet active; nothing to trigger
        var i, len;
        for (i = 0, len = this.eventsheets_by_index.length; i < len; i++)
        this.eventsheets_by_index[i].hasTriggered = false;
        return this.triggerOnSheet(method, inst, sheet);
    };
    runtimeProto.triggerOnSheet = function (method, inst, sheet) {
        if (sheet.hasTriggered) return false;
        sheet.hasTriggered = true;
        var includes = sheet.includes.values();
        var ret = false;
        var i, j, leni, lenj;
        for (i = 0, leni = includes.length; i < leni; i++) {
            var r = this.triggerOnSheet(method, inst, includes[i]);
            ret = ret || r;
        }
        var type_name;
        if (!inst) type_name = "system";
        else type_name = inst.type.name;
        if (!sheet.triggers[type_name]) return ret;
        var obj_entry = sheet.triggers[type_name];
        var triggers_list = null;
        for (i = 0, leni = obj_entry.length; i < leni; i++) {
            if (obj_entry[i].method == method) {
                triggers_list = obj_entry[i].evs;
                break;
            }
        }
        if (!triggers_list) return ret;
        for (i = 0, leni = triggers_list.length; i < leni; i++) {
            var trig = triggers_list[i];
            this.pushCleanSol(trig.solModifiers);
            this.pushEventStack(trig);
            if (inst) {
                var sol = inst.type.getCurrentSol();
                sol.select_all = false;
                sol.instances.length = 1;
                sol.instances[0] = inst;
            }
            var ok_to_run = true;
            if (trig.parent) {
                var temp_parents_arr = this.getCurrentEventStack().temp_parents_arr;
                var cur_parent = trig.parent;
                while (cur_parent) {
                    temp_parents_arr.push(cur_parent);
                    cur_parent = cur_parent.parent;
                }
                temp_parents_arr.reverse();
                for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++)
                this.pushCleanSol(temp_parents_arr[j].solModifiers);
                for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++) {
                    if (!temp_parents_arr[j].run_pretrigger()) // parent event failed
                    {
                        ok_to_run = false;
                        break;
                    }
                }
                for (j = 0, lenj = temp_parents_arr.length; j < lenj; j++)
                this.popSol(temp_parents_arr[j].solModifiers);
            }
            if (ok_to_run) {
                this.execcount++;
                trig.run();
                ret = true; // something got triggered
            }
            this.popSol(trig.solModifiers);
            this.popEventStack();
        }
        return ret; // true if anything got triggered
    };
    cr.eventStackFrame = function () {
        this.temp_parents_arr = [];
        this.reset(null);
        cr.seal(this);
    };
    var eventStackFrameProto = cr.eventStackFrame.prototype;
    eventStackFrameProto.reset = function (cur_event) {
        this.current_event = cur_event;
        this.cndindex = 0;
        this.actindex = 0;
        this.temp_parents_arr.length = 0;
    };
    eventStackFrameProto.isModifierAfterCnds = function () {
        if (this.current_event.solWriterAfterCnds) return true;
        if (this.cndindex < this.current_event.conditions.length - 1) return !!this.current_event.solModifiers.length;
        return false;
    };
    runtimeProto.getCurrentCondition = function () {
        var evinfo = this.getCurrentEventStack();
        return evinfo.current_event.conditions[evinfo.cndindex];
    };
    runtimeProto.getCurrentAction = function () {
        var evinfo = this.getCurrentEventStack();
        return evinfo.current_event.actions[evinfo.actindex];
    };
    runtimeProto.pushEventStack = function (cur_event) {
        this.event_stack_index++;
        if (this.event_stack_index >= this.event_stack.length) this.event_stack.push(new cr.eventStackFrame());
        var ret = this.getCurrentEventStack();
        ret.reset(cur_event);
        return ret;
    };
    runtimeProto.popEventStack = function () {;
        this.event_stack_index--;
    };
    runtimeProto.getCurrentEventStack = function () {
        return this.event_stack[this.event_stack_index];
    };
    runtimeProto.pushLoopStack = function (name_) {
        this.loop_stack_index++;
        if (this.loop_stack_index >= this.loop_stack.length) {
            this.loop_stack.push(cr.seal({
                name: name_,
                index: 0
            }));
        }
        var ret = this.getCurrentLoop();
        ret.name = name_;
        ret.index = 0;
        return ret;
    };
    runtimeProto.popLoopStack = function () {;
        this.loop_stack_index--;
    };
    runtimeProto.getCurrentLoop = function () {
        return this.loop_stack[this.loop_stack_index];
    };
    runtimeProto.getEventVariableByName = function (name, scope) {
        var i, leni, j, lenj, sheet, e;
        while (scope) {
            for (i = 0, leni = scope.subevents.length; i < leni; i++) {
                e = scope.subevents[i];
                if (e instanceof cr.eventvariable && name.toLowerCase() === e.name.toLowerCase()) return e;
            }
            scope = scope.parent;
        }
        for (i = 0, leni = this.eventsheets_by_index.length; i < leni; i++) {
            sheet = this.eventsheets_by_index[i];
            for (j = 0, lenj = sheet.events.length; j < lenj; j++) {
                e = sheet.events[j];
                if (e instanceof cr.eventvariable && name.toLowerCase() === e.name.toLowerCase()) return e;
            }
        }
        return null;
    };
}());
(function () {
    cr.expNode = function (owner_, m) {
        this.owner = owner_;
        this.runtime = owner_.runtime;
        this.type = m[0];;
        this.get = [this.eval_int, this.eval_float, this.eval_string, this.eval_unaryminus, this.eval_add, this.eval_subtract, this.eval_multiply, this.eval_divide, this.eval_mod, this.eval_power, this.eval_and, this.eval_or, this.eval_equal, this.eval_notequal, this.eval_less, this.eval_lessequal, this.eval_greater, this.eval_greaterequal, this.eval_conditional, this.eval_system_exp, this.eval_object_behavior_exp, this.eval_instvar_exp, this.eval_object_behavior_exp, this.eval_eventvar_exp][this.type];
        var paramsModel = null;
        this.temp = new cr.expvalue();
        switch (this.type) {
        case 0:
            // int
        case 1:
            // float
        case 2:
            // string
            this.value = m[1];
            break;
        case 3:
            // unaryminus
            this.first = new cr.expNode(owner_, m[1]);
            break;
        case 18:
            // conditional
            this.first = new cr.expNode(owner_, m[1]);
            this.second = new cr.expNode(owner_, m[2]);
            this.third = new cr.expNode(owner_, m[3]);
            break;
        case 19:
            // system_exp
            this.func = m[1];;
            this.results = [];
            this.parameters = [];
            if (m.length === 3) {
                paramsModel = m[2];
                this.results.length = paramsModel.length + 1; // must also fit 'ret'
            } else this.results.length = 1; // to fit 'ret'
            break;
        case 20:
            // object_exp
            this.object_type = this.runtime.types_by_index[m[1]];;
            this.beh_index = -1;
            this.func = m[2];
            if (m[3]) this.instance_expr = new cr.expNode(owner_, m[3]);
            else this.instance_expr = null;
            this.results = [];
            this.parameters = [];
            if (m.length === 5) {
                paramsModel = m[4];
                this.results.length = paramsModel.length + 1;
            } else this.results.length = 1; // to fit 'ret'
            break;
        case 21:
            // instvar_exp
            this.object_type = this.runtime.types_by_index[m[1]];;
            if (m[2]) this.instance_expr = new cr.expNode(owner_, m[2]);
            else this.instance_expr = null;
            this.varindex = m[3];
            break;
        case 22:
            // behavior_exp
            this.object_type = this.runtime.types_by_index[m[1]];;
            this.behavior_type = this.object_type.getBehaviorByName(m[2]);;
            this.beh_index = this.object_type.getBehaviorIndexByName(m[2]);
            this.func = m[3];
            if (m[4]) this.instance_expr = new cr.expNode(owner_, m[4]);
            else this.instance_expr = null;
            this.results = [];
            this.parameters = [];
            if (m.length === 6) {
                paramsModel = m[5];
                this.results.length = paramsModel.length + 1;
            } else this.results.length = 1; // to fit 'ret'
            break;
        case 23:
            // eventvar_exp
            this.varname = m[1];
            this.eventvar = null; // assigned in postInit
            break;
        }
        if (this.type >= 4 && this.type <= 17) {
            this.first = new cr.expNode(owner_, m[1]);
            this.second = new cr.expNode(owner_, m[2]);
        }
        if (paramsModel) {
            var i, len;
            for (i = 0, len = paramsModel.length; i < len; i++)
            this.parameters.push(new cr.expNode(owner_, paramsModel[i]));
        }
        cr.seal(this);
    };
    var expNodeProto = cr.expNode.prototype;
    expNodeProto.postInit = function () {
        if (this.type === 23) // eventvar_exp
        {
            this.eventvar = this.owner.runtime.getEventVariableByName(this.varname, this.owner.block.parent);;
        }
        if (this.first) this.first.postInit();
        if (this.second) this.second.postInit();
        if (this.third) this.third.postInit();
        if (this.instance_expr) this.instance_expr.postInit();
        if (this.parameters) {
            var i, len;
            for (i = 0, len = this.parameters.length; i < len; i++)
            this.parameters[i].postInit();
        }
    };
    expNodeProto.eval_system_exp = function (ret) {
        this.results[0] = ret;
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++) {
            this.parameters[i].get(this.temp);
            this.results[i + 1] = this.temp.data; // passing actual javascript value as argument instead of expvalue
        }
        this.func.apply(this.runtime.system, this.results);
    };
    expNodeProto.eval_object_behavior_exp = function (ret) {
        var sol = this.object_type.getCurrentSol();
        var instances = sol.getObjects();
        if (!instances.length) {
            ret.set_int(0);
            return;
        }
        this.results[0] = ret;
        var i, len;
        for (i = 0, len = this.parameters.length; i < len; i++) {
            this.parameters[i].get(this.temp);
            this.results[i + 1] = this.temp.data; // passing actual javascript value as argument instead of expvalue
        }
        var index = this.owner.solindex;
        if (this.instance_expr) {
            this.instance_expr.get(this.temp);
            if (this.temp.is_number()) {
                index = this.temp.data;
                instances = this.object_type.instances; // pick from all instances, not SOL
            }
        }
        index %= instances.length; // wraparound
        if (index < 0) index += instances.length;
        var returned_val;
        if (this.beh_index > -1) returned_val = this.func.apply(instances[index].behavior_insts[this.beh_index], this.results);
        else returned_val = this.func.apply(instances[index], this.results);;
    };
    expNodeProto.eval_instvar_exp = function (ret) {
        var sol = this.object_type.getCurrentSol();
        var instances = sol.getObjects();
        if (!instances.length) {
            ret.set_int(0);
            return;
        }
        var index = this.owner.solindex;
        if (this.instance_expr) {
            this.instance_expr.get(this.temp);
            if (this.temp.is_number()) {
                index = this.temp.data;
                var type_instances = this.object_type.instances;
                index %= type_instances.length; // wraparound
                if (index < 0) // offset
                index += type_instances.length;
                var to_ret = type_instances[index].instance_vars[this.varindex];
                if (typeof to_ret === "string") ret.set_string(to_ret);
                else ret.set_float(to_ret);
                return; // done
            }
        }
        index %= instances.length; // wraparound
        if (index < 0) index += instances.length;
        var to_ret = instances[index].instance_vars[this.varindex];
        if (typeof to_ret === "string") ret.set_string(to_ret);
        else ret.set_float(to_ret);
    };
    expNodeProto.eval_int = function (ret) {
        ret.type = cr.exptype.Integer;
        ret.data = this.value;
    };
    expNodeProto.eval_float = function (ret) {
        ret.type = cr.exptype.Float;
        ret.data = this.value;
    };
    expNodeProto.eval_string = function (ret) {
        ret.type = cr.exptype.String;
        ret.data = this.value;
    };
    expNodeProto.eval_unaryminus = function (ret) {
        this.first.get(ret); // retrieve operand
        if (ret.is_number()) ret.data = -ret.data;
    };
    expNodeProto.eval_add = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data += this.temp.data; // both operands numbers: add
            if (this.temp.is_float()) ret.make_float();
        }
    };
    expNodeProto.eval_subtract = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data -= this.temp.data; // both operands numbers: subtract
            if (this.temp.is_float()) ret.make_float();
        }
    };
    expNodeProto.eval_multiply = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data *= this.temp.data; // both operands numbers: multiply
            if (this.temp.is_float()) ret.make_float();
        }
    };
    expNodeProto.eval_divide = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data /= this.temp.data; // both operands numbers: divide
            ret.make_float();
        }
    };
    expNodeProto.eval_mod = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data %= this.temp.data; // both operands numbers: modulo
            if (this.temp.is_float()) ret.make_float();
        }
    };
    expNodeProto.eval_power = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            ret.data = Math.pow(ret.data, this.temp.data); // both operands numbers: raise to power
            if (this.temp.is_float()) ret.make_float();
        }
    };
    expNodeProto.eval_and = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number()) {
            if (this.temp.is_string()) {
                ret.set_string(ret.data.toString() + this.temp.data);
            } else {
                if (ret.data && this.temp.data) ret.set_int(1);
                else ret.set_int(0);
            }
        } else if (ret.is_string()) {
            if (this.temp.is_string()) ret.data += this.temp.data;
            else {
                ret.data += (Math.round(this.temp.data * 1e10) / 1e10).toString();
            }
        }
    };
    expNodeProto.eval_or = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        if (ret.is_number() && this.temp.is_number()) {
            if (ret.data || this.temp.data) ret.set_int(1);
            else ret.set_int(0);
        }
    };
    expNodeProto.eval_conditional = function (ret) {
        this.first.get(ret); // condition operand
        if (ret.data) // is true
        this.second.get(ret); // evaluate second operand to ret
        else this.third.get(ret); // evaluate third operand to ret
    };
    expNodeProto.eval_equal = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data === this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_notequal = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data !== this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_less = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data < this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_lessequal = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data <= this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_greater = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data > this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_greaterequal = function (ret) {
        this.first.get(ret); // left operand
        this.second.get(this.temp); // right operand
        ret.set_int(ret.data >= this.temp.data ? 1 : 0);
    };
    expNodeProto.eval_eventvar_exp = function (ret) {
        if (typeof this.eventvar.data === "number") ret.set_float(this.eventvar.data);
        else ret.set_string(this.eventvar.data);
    };
    cr.expvalue = function (type, data) {
        this.type = type || cr.exptype.Integer;
        this.data = data || 0;;;;
        if (this.type == cr.exptype.Integer) this.data = Math.floor(this.data);
        cr.seal(this);
    };
    var expvalueProto = cr.expvalue.prototype;
    expvalueProto.is_int = function () {
        return this.type === cr.exptype.Integer;
    };
    expvalueProto.is_float = function () {
        return this.type === cr.exptype.Float;
    };
    expvalueProto.is_number = function () {
        return this.type === cr.exptype.Integer || this.type === cr.exptype.Float;
    };
    expvalueProto.is_string = function () {
        return this.type === cr.exptype.String;
    };
    expvalueProto.make_int = function () {
        if (!this.is_int()) {
            if (this.is_float()) this.data = Math.floor(this.data); // truncate float
            else if (this.is_string()) this.data = parseInt(this.data, 10);
            this.type = cr.exptype.Integer;
        }
    };
    expvalueProto.make_float = function () {
        if (!this.is_float()) {
            if (this.is_string()) this.data = parseFloat(this.data);
            this.type = cr.exptype.Float;
        }
    };
    expvalueProto.make_string = function () {
        if (!this.is_string()) {
            this.data = this.data.toString();
            this.type = cr.exptype.String;
        }
    };
    expvalueProto.set_int = function (val) {;
        this.type = cr.exptype.Integer;
        this.data = Math.floor(val);
    };
    expvalueProto.set_float = function (val) {;
        this.type = cr.exptype.Float;
        this.data = val;
    };
    expvalueProto.set_string = function (val) {;
        this.type = cr.exptype.String;
        this.data = val;
    };
    expvalueProto.set_any = function (val) {
        if (typeof val === "number") {
            this.type = cr.exptype.Float;
            this.data = val;
        } else if (typeof val === "string") {
            this.type = cr.exptype.String;
            this.data = val.toString();
        } else {
            this.type = cr.exptype.Integer;
            this.data = 0;
        }
    };
    cr.exptype = {
        Integer: 0,
        // emulated; no native integer support in javascript
        Float: 1,
        String: 2
    };
}());;
cr.system_object = function (runtime) {
    this.runtime = runtime;
    this.waits = [];
};
(function () {
    var sysProto = cr.system_object.prototype;
    sysProto.cnds = {};
    sysProto.acts = {};
    sysProto.exps = {};
    var syscnds = sysProto.cnds;
    syscnds.EveryTick = function () {
        return true;
    };
    syscnds.OnLayoutStart = function () {
        return true;
    };
    syscnds.OnLayoutEnd = function () {
        return true;
    };
    syscnds.Compare = function (x, cmp, y) {
        return cr.do_cmp(x, cmp, y);
    };
    syscnds.CompareTime = function (cmp, t) {
        var elapsed = this.runtime.kahanTime.sum;
        if (cmp === 0) {
            var cnd = this.runtime.getCurrentCondition();
            if (!cnd.extra.CompareTime_executed) {
                if (elapsed >= t) {
                    cnd.extra.CompareTime_executed = true;
                    return true;
                }
            }
            return false;
        }
        return cr.do_cmp(elapsed, cmp, t);
    };
    syscnds.LayerVisible = function (layer) {
        if (!layer) return false;
        else return layer.visible;
    };
    syscnds.LayerCmpOpacity = function (layer, cmp, opacity_) {
        if (!layer) return false;
        return cr.do_cmp(layer.opacity * 100, cmp, opacity_);
    };
    syscnds.Repeat = function (count) {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
        var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack();
        var i;
        if (solModifierAfterCnds) {
            for (i = 0; i < count; i++) {
                this.runtime.pushCopySol(current_event.solModifiers);
                current_loop.index = i;
                current_event.retrigger();
                this.runtime.popSol(current_event.solModifiers);
            }
        } else {
            for (i = 0; i < count; i++) {
                current_loop.index = i;
                current_event.retrigger();
            }
        }
        this.runtime.popLoopStack();
        return false;
    };
    syscnds.For = function (name, start, end) {
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
        var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i;
        if (solModifierAfterCnds) {
            for (i = start; i <= end; i++) // inclusive to end
            {
                this.runtime.pushCopySol(current_event.solModifiers);
                current_loop.index = i;
                current_event.retrigger();
                this.runtime.popSol(current_event.solModifiers);
            }
        } else {
            for (i = start; i <= end; i++) // inclusive to end
            {
                current_loop.index = i;
                current_event.retrigger();
            }
        }
        this.runtime.popLoopStack();
        return false;
    };
    syscnds.ForEach = function (obj) {
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects().slice(0);
        var current_frame = this.runtime.getCurrentEventStack();
        var current_event = current_frame.current_event;
        var solModifierAfterCnds = current_frame.isModifierAfterCnds();
        var current_loop = this.runtime.pushLoopStack(name);
        var i, len;
        if (solModifierAfterCnds) {
            for (i = 0, len = instances.length; i < len; i++) {
                this.runtime.pushCopySol(current_event.solModifiers);
                sol = obj.getCurrentSol();
                sol.select_all = false;
                sol.instances.length = 1;
                sol.instances[0] = instances[i];
                current_loop.index = i;
                current_event.retrigger();
                this.runtime.popSol(current_event.solModifiers);
            }
        } else {
            sol.select_all = false;
            sol.instances.length = 1;
            for (i = 0, len = instances.length; i < len; i++) {
                sol.instances[0] = instances[i];
                current_loop.index = i;
                current_event.retrigger();
            }
        }
        this.runtime.popLoopStack();
        return false;
    };
    syscnds.TriggerOnce = function () {
        var cnd = this.runtime.getCurrentCondition();
        var last_tick = cnd.extra.TriggerOnce_lastTick || 0;
        var cur_tick = this.runtime.tickcount;
        cnd.extra.TriggerOnce_lastTick = cur_tick;
        return this.runtime.layout_first_tick || !(last_tick === cur_tick - 1);
    };
    syscnds.Every = function (seconds) {
        var cnd = this.runtime.getCurrentCondition();
        var last_time = cnd.extra.Every_lastTime || 0;
        var cur_time = this.runtime.kahanTime.sum;
        if (cur_time >= last_time + seconds) {
            cnd.extra.Every_lastTime = cur_time;
            return true;
        } else return false;
    };
    syscnds.PickNth = function (obj, index) {
        if (!obj) return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        index = Math.floor(index);
        if (index < 0 || index >= instances.length) return false;
        var inst = instances[index];
        sol.select_all = false;
        sol.instances.length = 1;
        sol.instances[0] = inst;
        return true;
    };
    syscnds.PickRandom = function (obj) {
        if (!obj) return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var index = Math.floor(Math.random() * instances.length);
        if (index >= instances.length) return false;
        var inst = instances[index];
        sol.select_all = false;
        sol.instances.length = 1;
        sol.instances[0] = inst;
        return true;
    };
    syscnds.CompareVar = function (v, cmp, val) {
        return cr.do_cmp(v.data, cmp, val);
    };
    syscnds.IsGroupActive = function (group) {
        return this.runtime.activeGroups.hasOwnProperty(group);
    };
    syscnds.IsPreview = function () {
        return typeof cr_is_preview !== "undefined";
    };
    var sysacts = sysProto.acts;
    sysacts.GoToLayout = function (to) {;
        this.runtime.changelayout = to;
    };
    
    sysacts.CreateObject = function (obj, layer, x, y) {
        if (!layer || !obj) return;
        var inst = this.runtime.createInstance(obj, layer, x, y);
        var sol = inst.type.getCurrentSol();
        sol.select_all = false;
        sol.instances.length = 1;
        sol.instances[0] = inst;
        globalSysActs = sysacts;
    };
    sysacts.SetLayerVisible = function (layer, visible_) {
        if (!layer) return;
        if (layer.visible !== visible_) {
            layer.visible = visible_;
            this.runtime.redraw = true;
        }
    };
    sysacts.SetLayerOpacity = function (layer, opacity_) {
        if (!layer) return;
        opacity_ = cr.clamp(opacity_ / 100, 0, 1);
        if (layer.opacity !== opacity_) {
            layer.opacity = opacity_;
            this.runtime.redraw = true;
        }
    };
    sysacts.SetLayerScaleRate = function (layer, sr) {
        if (!layer) return;
        if (layer.zoomRate !== sr) {
            layer.zoomRate = sr;
            this.runtime.redraw = true;
        }
    };
    sysacts.SetLayoutScale = function (s) {
        if (!this.runtime.running_layout) return;
        if (this.runtime.running_layout.scale !== s) {
            this.runtime.running_layout.scale = s;
            this.runtime.redraw = true;
        }
    };
    sysacts.ScrollX = function (x) {
        this.runtime.running_layout.scrollToX(x);
    };
    sysacts.ScrollY = function (y) {
        this.runtime.running_layout.scrollToY(y);
    };
    sysacts.Scroll = function (x, y) {
        this.runtime.running_layout.scrollToX(x);
        this.runtime.running_layout.scrollToY(y);
    };
    sysacts.ScrollToObject = function (obj) {
        var inst = obj.getFirstPicked();
        if (inst) {
            this.runtime.running_layout.scrollToX(inst.x);
            this.runtime.running_layout.scrollToY(inst.y);
        }
    };
    sysacts.SetVar = function (v, x) {
        if (v.vartype === 0) {
            if (typeof x === "number") v.data = x;
            else v.data = parseFloat(x);
        } else if (v.vartype === 1) v.data = x.toString();
    };
    sysacts.AddVar = function (v, x) {
        if (v.vartype === 0) {
            if (typeof x === "number") v.data += x;
            else v.data += parseFloat(x);
        } else if (v.vartype === 1) v.data += x.toString();
    };
    sysacts.SubVar = function (v, x) {
        if (v.vartype === 0) {
            if (typeof x === "number") v.data -= x;
            else v.data -= parseFloat(x);
        }
    };
    sysacts.SetGroupActive = function (group, active) {
        var activeGroups = this.runtime.activeGroups;
        switch (active) {
        case 0:
            delete activeGroups[group];
            break;
        case 1:
            activeGroups[group] = true;
            break;
        case 2:
            if (activeGroups[group]) delete activeGroups[group];
            else activeGroups[group] = true;
            break;
        }
    };
    sysacts.SetTimescale = function (ts_) {
        var ts = ts_;
        if (ts < 0) ts = 0;
        this.runtime.timescale = ts;
    };
    sysacts.SetObjectTimescale = function (obj, ts_) {
        var ts = ts_;
        if (ts < 0) ts = 0;
        if (!obj) return;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++) {
            instances[i].my_timescale = ts;
        }
    };
    sysacts.RestoreObjectTimescale = function (obj) {
        if (!obj) return false;
        var sol = obj.getCurrentSol();
        var instances = sol.getObjects();
        var i, len;
        for (i = 0, len = instances.length; i < len; i++) {
            instances[i].my_timescale = -1.0;
        }
    };
    sysacts.Wait = function (seconds) {
        if (seconds < 0) return;
        var i, len, s, t;
        var evinfo = this.runtime.getCurrentEventStack();
        var waitobj = {};
        waitobj.time = this.runtime.kahanTime.sum + seconds;
        waitobj.ev = evinfo.current_event;
        waitobj.actindex = evinfo.actindex + 1; // pointing at next action
        waitobj.deleteme = false;
        waitobj.sols = {};
        waitobj.solModifiers = [];
        for (i = 0, len = this.runtime.types_by_index.length; i < len; i++) {
            t = this.runtime.types_by_index[i];
            s = t.getCurrentSol();
            if (s.select_all) continue;
            waitobj.solModifiers.push(t);
            waitobj.sols[i.toString()] = s.instances.slice(0);
        }
        this.waits.push(waitobj);
        return true;
    };
    sysacts.SetLayerScale = function (layer, scale) {
        if (!layer) return;
        layer.scale = scale;
        this.runtime.redraw = true;
    };
    sysacts.ResetGlobals = function () {
        var i, len, g;
        for (i = 0, len = this.runtime.all_global_vars.length; i < len; i++) {
            g = this.runtime.all_global_vars[i];
            g.data = g.initial;
        }
    };
    var sysexps = sysProto.exps;
    sysexps["int"] = function (ret, x) {
        if (typeof x === "string") {
            ret.set_int(parseInt(x, 10));
            if (isNaN(ret.data)) ret.data = 0;
        } else ret.set_int(x);
    };
    sysexps["float"] = function (ret, x) {
        if (typeof x === "string") {
            ret.set_float(parseFloat(x));
            if (isNaN(ret.data)) ret.data = 0;
        } else ret.set_float(x);
    };
    sysexps.str = function (ret, x) {
        if (typeof x === "string") ret.set_string(x);
        else ret.set_string(x.toString());
    };
    sysexps.len = function (ret, x) {
        ret.set_int(x.length || 0);
    };
    sysexps.random = function (ret, a, b) {
        if (b === undefined) {
            ret.set_float(Math.random() * a);
        } else {
            ret.set_float(Math.random() * (b - a) + a);
        }
    };
    sysexps.sqrt = function (ret, x) {
        ret.set_float(Math.sqrt(x));
    };
    sysexps.abs = function (ret, x) {
        ret.set_float(Math.abs(x));
    };
    sysexps.round = function (ret, x) {
        ret.set_int(Math.round(x));
    };
    sysexps.floor = function (ret, x) {
        ret.set_int(Math.floor(x));
    };
    sysexps.ceil = function (ret, x) {
        ret.set_int(Math.ceil(x));
    };
    sysexps.sin = function (ret, x) {
        ret.set_float(Math.sin(cr.to_radians(x)));
    };
    sysexps.cos = function (ret, x) {
        ret.set_float(Math.cos(cr.to_radians(x)));
    };
    sysexps.tan = function (ret, x) {
        ret.set_float(Math.tan(cr.to_radians(x)));
    };
    sysexps.asin = function (ret, x) {
        ret.set_float(cr.to_degrees(Math.asin(x)));
    };
    sysexps.acos = function (ret, x) {
        ret.set_float(cr.to_degrees(Math.acos(x)));
    };
    sysexps.atan = function (ret, x) {
        ret.set_float(cr.to_degrees(Math.atan(x)));
    };
    sysexps.exp = function (ret, x) {
        ret.set_float(Math.exp(x));
    };
    sysexps.ln = function (ret, x) {
        ret.set_float(Math.log(x));
    };
    sysexps.log10 = function (ret, x) {
        ret.set_float(Math.log(x) / Math.LN10);
    };
    sysexps.max = function (ret) {
        var max_ = arguments[1];
        var i, len;
        for (i = 2, len = arguments.length; i < len; i++) {
            if (max_ < arguments[i]) max_ = arguments[i];
        }
        ret.set_float(max_);
    };
    sysexps.min = function (ret) {
        var min_ = arguments[1];
        var i, len;
        for (i = 2, len = arguments.length; i < len; i++) {
            if (min_ > arguments[i]) min_ = arguments[i];
        }
        ret.set_float(min_);
    };
    sysexps.dt = function (ret) {
        ret.set_float(this.runtime.dt);
    };
    sysexps.timescale = function (ret) {
        ret.set_float(this.runtime.timescale);
    };
    sysexps.wallclocktime = function (ret) {
        ret.set_float((Date.now() - this.runtime.start_time) / 1000.0);
    };
    sysexps.time = function (ret) {
        ret.set_float(this.runtime.kahanTime.sum);
    };
    sysexps.tickcount = function (ret) {
        ret.set_int(this.runtime.tickcount);
    };
    sysexps.objectcount = function (ret) {
        ret.set_int(this.runtime.objectcount);
    };
    sysexps.fps = function (ret) {
        ret.set_int(this.runtime.fps);
    };
    sysexps.loopindex = function (ret, name_) {
        if (!this.runtime.loop_stack.length) {
            ret.set_int(0);
            return;
        }
        if (name_) {
            var i, len;
            for (i = 0, len = this.runtime.loop_stack.length; i < len; i++) {
                var loop = this.runtime.loop_stack[i];
                if (loop.name === name_) {
                    ret.set_int(loop.index);
                    return;
                }
            }
            ret.set_int(0);
        } else {
            ret.set_int(this.runtime.getCurrentLoop().index);
        }
    };
    sysexps.distance = function (ret, x1, y1, x2, y2) {
        ret.set_float(cr.distanceTo(x1, y1, x2, y2));
    };
    sysexps.angle = function (ret, x1, y1, x2, y2) {
        ret.set_float(cr.to_degrees(cr.angleTo(x1, y1, x2, y2)));
    };
    sysexps.scrollx = function (ret) {
        ret.set_float(this.runtime.running_layout.scrollX);
    };
    sysexps.scrolly = function (ret) {
        ret.set_float(this.runtime.running_layout.scrollY);
    };
    sysexps.newline = function (ret) {
        ret.set_string("\n");
    };
    sysexps.lerp = function (ret, a, b, x) {
        ret.set_float(cr.lerp(a, b, x));
    };
    sysexps.windowwidth = function (ret) {
        ret.set_int(this.runtime.width);
    };
    sysexps.windowheight = function (ret) {
        ret.set_int(this.runtime.height);
    };
    sysexps.uppercase = function (ret, str) {
        ret.set_string(str.toUpperCase());
    };
    sysexps.lowercase = function (ret, str) {
        ret.set_string(str.toLowerCase());
    };
    sysexps.clamp = function (ret, x, l, u) {
        if (x < l) ret.set_float(l);
        else if (x > u) ret.set_float(u);
        else ret.set_float(x);
    };
    sysexps.layerscale = function (ret, layerparam) {
        var layer = this.runtime.getLayer(layerparam);
        if (!layer) ret.set_float(0);
        else ret.set_float(layer.scale);
    };
    sysexps.layeropacity = function (ret, layerparam) {
        var layer = this.runtime.getLayer(layerparam);
        if (!layer) ret.set_float(0);
        else ret.set_float(layer.opacity * 100);
    };
    sysexps.layerscalerate = function (ret, layerparam) {
        var layer = this.runtime.getLayer(layerparam);
        if (!layer) ret.set_float(0);
        else ret.set_float(layer.zoomRate);
    };
    sysexps.layoutscale = function (ret) {
        if (this.runtime.running_layout) ret.set_float(this.runtime.running_layout.scale);
        else ret.set_float(0);
    };
    sysexps.layoutwidth = function (ret) {
        ret.set_int(this.runtime.running_layout.width);
    };
    sysexps.layoutheight = function (ret) {
        ret.set_int(this.runtime.running_layout.height);
    };
    sysexps.find = function (ret, text, searchstr) {
        ret.set_int(text.search(new RegExp(cr.regexp_escape(searchstr), "i")));
    };
    sysexps.left = function (ret, text, n) {
        ret.set_string(text.substr(0, n));
    };
    sysexps.right = function (ret, text, n) {
        ret.set_string(text.substr(text.length - n));
    };
    sysexps.mid = function (ret, text, index_, length_) {
        ret.set_string(text.substr(index_, length_));
    };
    sysexps.tokenat = function (ret, text, index_, sep) {
        var arr = text.split(sep);
        var i = Math.floor(index_);
        if (i < 0 || i >= arr.length) ret.set_string("");
        else ret.set_string(arr[i]);
    };
    sysexps.tokencount = function (ret, text, sep) {
        ret.set_int(text.split(sep).length);
    };
    sysexps.replace = function (ret, text, find_, replace_) {
        ret.set_string(text.replace(new RegExp(cr.regexp_escape(find_), "gi"), replace_));
    };
    sysexps.trim = function (ret, text) {
        ret.set_string(text.trim());
    };
    sysexps.pi = function (ret) {
        ret.set_float(Math.PI);
    };
    sysexps.layoutname = function (ret) {
        if (this.runtime.running_layout) ret.set_string(this.runtime.running_layout.name);
        else ret.set_string("");
    };
    sysProto.runWaits = function () {
        var i, j, len, w, k, s;
        var evinfo = this.runtime.getCurrentEventStack();
        for (i = 0, len = this.waits.length; i < len; i++) {
            w = this.waits[i];
            if (w.time > this.runtime.kahanTime.sum) continue;
            evinfo.current_event = w.ev;
            evinfo.actindex = w.actindex;
            evinfo.cndindex = 0;
            for (k in w.sols) {
                if (w.sols.hasOwnProperty(k)) {
                    s = this.runtime.types_by_index[parseInt(k, 10)].getCurrentSol();
                    s.select_all = false;
                    s.instances = w.sols[k];
                }
            }
            w.ev.resume_actions_and_subevents();
            this.runtime.clearSol(w.solModifiers);
            w.deleteme = true;
        }
        for (i = 0, j = 0, len = this.waits.length; i < len; i++) {
            w = this.waits[i];
            this.waits[j] = w;
            if (!w.deleteme) j++;
        }
        this.waits.length = j;
    };
}());;
cr.add_common_aces = function (m) {
    var pluginProto = m[0].prototype;
    var singleglobal = m[1];
    var is_world = m[2];
    var position_aces = m[3];
    var size_aces = m[4];
    var angle_aces = m[5];
    var appearance_aces = m[6];
    var zorder_aces = m[7];
    if (!pluginProto.cnds) pluginProto.cnds = {};
    if (!pluginProto.acts) pluginProto.acts = {};
    if (!pluginProto.exps) pluginProto.exps = {};
    var cnds = pluginProto.cnds;
    var acts = pluginProto.acts;
    var exps = pluginProto.exps;
    if (position_aces) {
        cnds.CompareX = function (cmp, x) {
            return cr.do_cmp(this.x, cmp, x);
        };
        cnds.CompareY = function (cmp, y) {
            return cr.do_cmp(this.y, cmp, y);
        };
        cnds.IsOnScreen = function () {
            var layer = this.layer;
            if (!this.visible || !layer.visible) return false;
            this.update_bbox();
            var bbox = this.bbox;
            return !(bbox.right < layer.viewLeft || bbox.bottom < layer.viewTop || bbox.left > layer.viewRight || bbox.top > layer.viewBottom);
        };
        cnds.IsOutsideLayout = function () {
            this.update_bbox();
            var bbox = this.bbox;
            var layout = this.runtime.running_layout;
            return (bbox.right < 0 || bbox.bottom < 0 || bbox.left > layout.width || bbox.top > layout.height);
        };
        cnds.PickDistance = function (which, x, y) {
            var sol = this.getCurrentSol();
            var instances = sol.getObjects();
            if (!instances.length) return false;
            var inst = instances[0];
            var pickme = inst;
            var dist = cr.distanceTo(inst.x, inst.y, x, y);
            var i, len, d;
            for (i = 1, len = instances.length; i < len; i++) {
                inst = instances[i];
                d = cr.distanceTo(inst.x, inst.y, x, y);
                if ((which === 0 && d < dist) || (which === 1 && d > dist)) {
                    dist = d;
                    pickme = inst;
                }
            }
            sol.select_all = false;
            sol.instances.length = 1;
            sol.instances[0] = pickme;
            return true;
        };
        acts.SetX = function (x) {
            if (this.x !== x) {
                this.x = x;
                this.set_bbox_changed();
            }
        };
        acts.SetY = function (y) {
            if (this.y !== y) {
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPos = function (x, y) {
            if (this.x !== x || this.y !== y) {
                this.x = x;
                this.y = y;
                this.set_bbox_changed();
            }
        };
        acts.SetPosToObject = function (obj, imgpt) {
            var inst = obj.getPairedInstance(this);
            if (!inst) return;
            var newx, newy;
            if (inst.getImagePoint) {
                newx = inst.getImagePoint(imgpt, true);
                newy = inst.getImagePoint(imgpt, false);
            } else {
                newx = inst.x;
                newy = inst.y;
            }
            if (this.x !== newx || this.y !== newy) {
                this.x = newx;
                this.y = newy;
                this.set_bbox_changed();
            }
        };
        acts.MoveForward = function (dist) {
            if (dist !== 0) {
                this.x += Math.cos(this.angle) * dist;
                this.y += Math.sin(this.angle) * dist;
                this.set_bbox_changed();
            }
        };
        acts.MoveAtAngle = function (a, dist) {
            if (dist !== 0) {
                this.x += Math.cos(cr.to_radians(a)) * dist;
                this.y += Math.sin(cr.to_radians(a)) * dist;
                this.set_bbox_changed();
            }
        };
        exps.X = function (ret) {
            ret.set_float(this.x);
        };
        exps.Y = function (ret) {
            ret.set_float(this.y);
        };
        exps.dt = function (ret) {
            ret.set_float(this.runtime.getDt(this));
        };
    }
    if (size_aces) {
        cnds.CompareWidth = function (cmp, w) {
            return cr.do_cmp(this.width, cmp, w);
        };
        cnds.CompareHeight = function (cmp, h) {
            return cr.do_cmp(this.height, cmp, h);
        };
        acts.SetWidth = function (w) {
            var newwidth = w;
            if (newwidth < 0) newwidth = -newwidth;
            if (this.width !== newwidth) {
                this.width = newwidth;
                this.set_bbox_changed();
            }
        };
        acts.SetHeight = function (h) {
            var newheight = h;
            if (newheight < 0) newheight = -newheight;
            if (this.height !== newheight) {
                this.height = newheight;
                this.set_bbox_changed();
            }
        };
        acts.SetSize = function (w, h) {
            var newwidth = w;
            var newheight = h;
            if (newwidth < 0) newwidth = -newwidth;
            if (newheight < 0) newheight = -newheight;
            if (this.width !== newwidth || this.height !== newheight) {
                this.width = newwidth;
                this.height = newheight;
                this.set_bbox_changed();
            }
        };
        exps.Width = function (ret) {
            ret.set_float(this.width);
        };
        exps.Height = function (ret) {
            ret.set_float(this.height);
        };
    }
    if (angle_aces) {
        cnds.AngleWithin = function (within, a) {
            return cr.angleDiff(this.angle, cr.to_radians(a)) <= cr.to_radians(within);
        };
        cnds.IsClockwiseFrom = function (a) {
            return cr.angleClockwise(this.angle, cr.to_radians(a));
        };
        cnds.IsBetweenAngles = function (a, b) {
            var lower = cr.to_clamped_radians(a);
            var upper = cr.to_clamped_radians(b);
            var angle = cr.clamp_angle(this.angle);
            return cr.angleClockwise(angle, lower) && !cr.angleClockwise(angle, upper);
        };
        acts.SetAngle = function (a) {
            var newangle = cr.to_radians(cr.clamp_angle_degrees(a));
            if (isNaN(newangle)) return;
            if (this.angle !== newangle) {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateClockwise = function (a) {
            if (a !== 0 && !isNaN(a)) {
                this.angle += cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateCounterclockwise = function (a) {
            if (a !== 0 && !isNaN(a)) {
                this.angle -= cr.to_radians(a);
                this.angle = cr.clamp_angle(this.angle);
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardAngle = function (amt, target) {
            var newangle = cr.angleRotate(this.angle, cr.to_radians(target), cr.to_radians(amt));
            if (isNaN(newangle)) return;
            if (this.angle !== newangle) {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.RotateTowardPosition = function (amt, x, y) {
            var dx = x - this.x;
            var dy = y - this.y;
            var target = Math.atan2(dy, dx);
            var newangle = cr.angleRotate(this.angle, target, cr.to_radians(amt));
            if (isNaN(newangle)) return;
            if (this.angle !== newangle) {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        acts.SetTowardPosition = function (x, y) {
            var dx = x - this.x;
            var dy = y - this.y;
            var newangle = Math.atan2(dy, dx);
            if (isNaN(newangle)) return;
            if (this.angle !== newangle) {
                this.angle = newangle;
                this.set_bbox_changed();
            }
        };
        exps.Angle = function (ret) {
            ret.set_float(cr.to_clamped_degrees(this.angle));
        };
    }
    if (!singleglobal) {
        cnds.CompareInstanceVar = function (iv, cmp, val) {
            return cr.do_cmp(this.instance_vars[iv], cmp, val);
        };
        cnds.IsBoolInstanceVarSet = function (iv) {
            return this.instance_vars[iv];
        };
        cnds.PickByUID = function (u) {
            return this.uid === u;
        };
        acts.SetInstanceVar = function (iv, val) {
            if (typeof this.instance_vars[iv] === "number") {
                if (typeof val === "number") this.instance_vars[iv] = val;
                else this.instance_vars[iv] = parseFloat(val);
            } else if (typeof this.instance_vars[iv] === "string") {
                if (typeof val === "string") this.instance_vars[iv] = val;
                else this.instance_vars[iv] = val.toString();
            } else;
        };
        acts.AddInstanceVar = function (iv, val) {
            if (typeof this.instance_vars[iv] === "number") {
                if (typeof val === "number") this.instance_vars[iv] += val;
                else this.instance_vars[iv] += parseFloat(val);
            } else if (typeof this.instance_vars[iv] === "string") {
                if (typeof val === "string") this.instance_vars[iv] += val;
                else this.instance_vars[iv] += val.toString();
            } else;
        };
        acts.SubInstanceVar = function (iv, val) {
            if (typeof this.instance_vars[iv] === "number") {
                if (typeof val === "number") this.instance_vars[iv] -= val;
                else this.instance_vars[iv] -= parseFloat(val);
            } else;
        };
        acts.SetBoolInstanceVar = function (iv, val) {
            this.instance_vars[iv] = val;
        };
        acts.ToggleBoolInstanceVar = function (iv) {
            this.instance_vars[iv] = !this.instance_vars[iv];
        };
        acts.Destroy = function () {
            this.runtime.DestroyInstance(this);
        };
        exps.Count = function (ret) {
            ret.set_int(this.type.instances.length);
        };
        exps.UID = function (ret) {
            ret.set_int(this.uid);
        };
    }
    if (appearance_aces) {
        cnds.IsVisible = function () {
            return this.visible;
        };
        acts.SetVisible = function (v) {
            if (!v !== !this.visible) {
                this.visible = v;
                this.runtime.redraw = true;
            }
        };
        cnds.CompareOpacity = function (cmp, x) {
            return cr.do_cmp(this.opacity * 100, cmp, x);
        };
        acts.SetOpacity = function (x) {
            var new_opacity = x / 100.0;
            if (new_opacity < 0) new_opacity = 0;
            else if (new_opacity > 1) new_opacity = 1;
            if (new_opacity !== this.opacity) {
                this.opacity = new_opacity;
                this.runtime.redraw = true;
            }
        };
        exps.Opacity = function (ret) {
            ret.set_float(this.opacity * 100.0);
        };
    }
    if (zorder_aces) {
        acts.MoveToTop = function () {
            var zindex = this.get_zindex();
            if (zindex === this.layer.instances.length - 1) return;
            cr.arrayRemove(this.layer.instances, zindex);
            this.layer.instances.push(this);
            this.runtime.redraw = true;
            this.layer.zindices_stale = true;
        };
        acts.MoveToBottom = function () {
            var zindex = this.get_zindex();
            if (zindex === 0) return;
            cr.arrayRemove(this.layer.instances, zindex);
            this.layer.instances.unshift(this);
            this.runtime.redraw = true;
            this.layer.zindices_stale = true;
        };
        acts.MoveToLayer = function (layerMove) {
            if (!layerMove || layerMove == this.layer) return;
            cr.arrayRemove(this.layer.instances, this.get_zindex());
            this.layer.zindices_stale = true;
            this.layer = layerMove;
            this.zindex = layerMove.instances.length;
            layerMove.instances.push(this);
            this.runtime.redraw = true;
        };
        exps.LayerNumber = function (ret) {
            ret.set_int(this.layer.number);
        };
        exps.LayerName = function (ret) {
            ret.set_string(this.layer.name);
        };
        exps.ZIndex = function (ret) {
            ret.set_int(this.get_zindex());
        };
    }
};
cr.set_bbox_changed = function () {
    this.bbox_changed = true; // will recreate next time box requested
    this.runtime.redraw = true; // assume runtime needs to redraw
    var i, len;
    for (i = 0, len = this.bbox_changed_callbacks.length; i < len; i++) {
        this.bbox_changed_callbacks[i](this);
    }
};
cr.add_bbox_changed_callback = function (f) {
    if (f) this.bbox_changed_callbacks.push(f);
};
cr.update_bbox = function () {
    if (!this.bbox_changed) return; // bounding box not changed
    this.bbox.set(this.x, this.y, this.x + this.width, this.y + this.height);
    this.bbox.offset(-this.hotspotX * this.width, -this.hotspotY * this.height);
    if (!this.angle || this.angle === 0) {
        this.bquad.set_from_rect(this.bbox); // make bounding quad from box
    } else {
        this.bbox.offset(-this.x, -this.y); // translate to origin
        this.bquad.set_from_rotated_rect(this.bbox, this.angle); // rotate around origin
        this.bquad.offset(this.x, this.y); // translate back to original position
        this.bquad.bounding_box(this.bbox);
    }
    this.bbox_changed = false; // bounding box up to date
};
cr.inst_contains_pt = function (x, y) {
    if (!this.bbox.contains_pt(x, y)) return false;
    if (!this.bquad.contains_pt(x, y)) return false;
    if (this.collision_poly && !this.collision_poly.is_empty()) {
        this.collision_poly.cache_poly(this.width, this.height * (this.runtime.isInstanceYFlipped(this) ? -1 : 1), this.angle);
        return this.collision_poly.contains_pt(x - this.x, y - this.y);
    } else return true;
};
cr.inst_get_iid = function () {
    this.type.updateIIDs();
    return this.iid;
};
cr.inst_get_zindex = function () {
    this.layer.updateZIndices();
    return this.zindex;
};
cr.inst_toString = function () {
    return "inst:" + this.type.name + "#" + this.uid;
};
cr.type_getFirstPicked = function () {
    var instances = this.getCurrentSol().getObjects();
    if (instances.length) return instances[0];
    else return null;
};
cr.type_getPairedInstance = function (inst) {
    var instances = this.getCurrentSol().getObjects();
    if (instances.length) return instances[inst.get_iid() % instances.length];
    else return null;
};
cr.type_updateIIDs = function () {
    if (!this.stale_iids) return; // up to date
    var i, len;
    for (i = 0, len = this.instances.length; i < len; i++)
    this.instances[i].iid = i;
    this.stale_iids = false;
};
cr.type_getCurrentSol = function () {
    return this.solstack[this.cur_sol];
};
cr.type_pushCleanSol = function () {
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length) this.solstack.push(new cr.selection(this));
    else this.solstack[this.cur_sol].select_all = true; // else clear next SOL
};
cr.type_pushCopySol = function () {
    this.cur_sol++;
    if (this.cur_sol === this.solstack.length) this.solstack.push(new cr.selection(this));
    var clonesol = this.solstack[this.cur_sol];
    var prevsol = this.solstack[this.cur_sol - 1];
    if (prevsol.select_all) clonesol.select_all = true;
    else {
        clonesol.select_all = false;
        clonesol.instances = prevsol.instances.slice(0); // copy elements
    }
};
cr.type_popSol = function () {;
    this.cur_sol--;
};
cr.type_getBehaviorByName = function (behname) {
    var i, len;
    for (i = 0, len = this.behaviors.length; i < len; i++) {
        if (behname === this.behaviors[i].name) return this.behaviors[i];
    }
    return null;
};
cr.type_getBehaviorIndexByName = function (behname) {
    var i, len;
    for (i = 0, len = this.behaviors.length; i < len; i++) {
        if (behname === this.behaviors[i].name) return i;
    }
    return -1;
};
cr.do_cmp = function (x, cmp, y) {
    switch (cmp) {
    case 0:
        // equal
        return x === y;
    case 1:
        // not equal
        return x !== y;
    case 2:
        // less
        return x < y;
    case 3:
        // less/equal
        return x <= y;
    case 4:
        // greater
        return x > y;
    case 5:
        // greater/equal
        return x >= y;
    default:
        ;
        return false;
    }
};;;
cr.plugins_.Keyboard = function (runtime) {
    this.runtime = runtime;
};
(function () {
    pluginProto = cr.plugins_.Keyboard.prototype;
    pluginProto.Type = function (plugin) {
        this.plugin = plugin;
        this.runtime = plugin.runtime;
    };
    var typeProto = pluginProto.Type.prototype;
    typeProto.onCreate = function () {};
    pluginProto.Instance = function (type) {
        this.type = type;
        this.runtime = type.runtime;
        this.keyMap = new Array(256); // stores key up/down state
        this.usedKeys = new Array(256);
        this.triggerKey = 0;
        this.eventRan = false;
    };
    var instanceProto = pluginProto.Instance.prototype;
    instanceProto.onCreate = function () {
      /*jQuery(document).keydown((function (self) {
        
        return function (info) {
          self.onKeyDown(info);
        };
      })(this));
      jQuery(document).keyup((function (self) {
        return function (info) {
          self.onKeyUp(info);
        };
      })(this));*/
      emulatedKeyInstance = this;
    };
    instanceProto.onKeyDown = function (info) {
        if (this.keyMap[info.which]) {
            if (this.usedKeys[info.which]) info.preventDefault();
            return;
        }
        this.keyMap[info.which] = true;
        this.eventRan = this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnAnyKey, this);
        this.triggerKey = info.which;
        this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKey, this);
        if (this.eventRan) {
            this.usedKeys[info.which] = true;
            info.preventDefault();
        }
    };
    instanceProto.onKeyUp = function (info) {
        this.keyMap[info.which] = false;
        this.triggerKey = info.which;
        this.eventRan = false;
        this.runtime.trigger(cr.plugins_.Keyboard.prototype.cnds.OnKeyReleased, this);
        if (this.eventRan || this.usedKeys[info.which]) {
            this.usedKeys[info.which] = true;
            info.preventDefault();
        }
    };
    pluginProto.cnds = {};
    var cnds = pluginProto.cnds;
    cnds.IsKeyDown = function (key) {
        return this.keyMap[key];
    };
    cnds.OnKey = function (key) {
        var ret = (key === this.triggerKey);
        this.eventRan = this.eventRan || ret;
        return ret;
    };
    cnds.OnAnyKey = function (key) {
        return true;
    };
    cnds.OnKeyReleased = function (key) {
        var ret = (key === this.triggerKey);
        this.eventRan = this.eventRan || ret;
        return ret;
    };
}());;;
cr.plugins_.Mouse = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var pluginProto = cr.plugins_.Mouse.prototype;
    pluginProto.Type = function (plugin) {
        this.plugin = plugin;
        this.runtime = plugin.runtime;
    };
    var typeProto = pluginProto.Type.prototype;
    typeProto.onCreate = function () {};
    pluginProto.Instance = function (type) {
        this.type = type;
        this.runtime = type.runtime;
        this.buttonMap = new Array(4); // mouse down states
        this.mouseXcanvas = 0; // mouse position relative to canvas
        this.mouseYcanvas = 0;
        this.triggerButton = 0;
        this.triggerType = 0;
        globalInstance = this;
    };
    var instanceProto = pluginProto.Instance.prototype;
    instanceProto.onCreate = function () {
        /*
        jQuery(document).mousemove((function (self) {
            return function (info) {
                self.onMouseMove(info);
            };
        })(this));
        jQuery(document).mousedown((function (self) {
            return function (info) {
                self.onMouseDown(info);
            };
        })(this));
        jQuery(document).mouseup((function (self) {
            return function (info) {
                self.onMouseUp(info);
            };
        })(this));
        jQuery(document).dblclick((function (self) {
            return function (info) {
                self.onDoubleClick(info);
            };
        })(this));
        */
    };
    instanceProto.onMouseMove = function (info) {
        var offset = jQuery(this.runtime.canvas).offset();
        this.mouseXcanvas = info.pageX - offset.left;
        this.mouseYcanvas = info.pageY - offset.top;
    };
    instanceProto.onMouseDown = function (info) {
        this.buttonMap[info.which] = true;
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnAnyClick, this);
        this.triggerButton = info.which - 1; // 1-based
        this.triggerType = 0; // single click
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
    };
    instanceProto.onMouseUp = function (info) {
        this.buttonMap[info.which] = false;
        this.triggerButton = info.which - 1; // 1-based
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnRelease, this);
    };
    instanceProto.onDoubleClick = function (info) {
        this.triggerButton = info.which - 1; // 1-based
        this.triggerType = 1; // double click
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnClick, this);
        this.runtime.trigger(cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, this);
    };
    pluginProto.cnds = {};
    var cnds = pluginProto.cnds;
    cnds.OnClick = function (button, type) {
        return button === this.triggerButton && type === this.triggerType;
    };
    cnds.OnAnyClick = function () {
        return true;
    };
    cnds.IsButtonDown = function (button) {
        return this.buttonMap[button + 1]; // jQuery uses 1-based buttons for some reason
    };
    cnds.OnRelease = function (button) {
        return button === this.triggerButton;
    };
    cnds.IsOverObject = function (obj) {
        var cnd = this.runtime.getCurrentCondition();
        if (typeof (cnd.extra.mouseOverInverted) === "undefined") {
            cnd.extra.mouseOverInverted = cnd.inverted;
            cnd.inverted = false;
        }
        var mx = this.mouseXcanvas;
        var my = this.mouseYcanvas;
        return this.runtime.testAndSelectCanvasPointOverlap(obj, mx, my, cnd.extra.mouseOverInverted);
    };
    cnds.OnObjectClicked = function (button, type, obj) {
        if (button !== this.triggerButton || type !== this.triggerType) {
          return false; // wrong click type
        }
        return this.runtime.testAndSelectCanvasPointOverlap(obj, this.mouseXcanvas, this.mouseYcanvas, false);
    };
    pluginProto.acts = {};
    var acts = pluginProto.acts;
    acts.SetCursor = function (c) {
        this.runtime.canvas.style.cursor = ["auto", "pointer", "text", "crosshair", "move", "help", "wait", "none"][c];
    };
    pluginProto.exps = {};
    var exps = pluginProto.exps;
    exps.X = function (ret, layerparam) {
        var layer, oldScale, oldZoomRate, oldParallaxX;
        if (typeof layerparam === "undefined") {
            layer = this.runtime.getLayerByNumber(0);
            oldScale = layer.scale;
            oldZoomRate = layer.zoomRate;
            oldParallaxX = layer.parallaxX;
            layer.scale = 1.0;
            layer.zoomRate = 1.0;
            layer.parallaxX = 1.0;
            ret.set_float(layer.canvasToLayerX(this.mouseXcanvas));
            layer.scale = oldScale;
            layer.zoomRate = oldZoomRate;
            layer.parallaxX = oldParallaxX;
        } else {
            if (typeof layerparam === "number") layer = this.runtime.getLayerByNumber(layerparam);
            else layer = this.runtime.getLayerByName(layerparam);
            if (!layer) ret.set_float(0);
            ret.set_float(layer.canvasToLayerX(this.mouseXcanvas));
        }
    };
    exps.Y = function (ret, layerparam) {
        var layer, oldScale, oldZoomRate, oldParallaxY;
        if (typeof layerparam === "undefined") {
            layer = this.runtime.getLayerByNumber(0);
            oldScale = layer.scale;
            oldZoomRate = layer.zoomRate;
            oldParallaxY = layer.parallaxY;
            layer.scale = 1.0;
            layer.zoomRate = 1.0;
            layer.parallaxY = 1.0;
            ret.set_float(layer.canvasToLayerY(this.mouseYcanvas));
            layer.scale = oldScale;
            layer.zoomRate = oldZoomRate;
            layer.parallaxY = oldParallaxY;
        } else {
            if (typeof layerparam === "number") layer = this.runtime.getLayerByNumber(layerparam);
            else layer = this.runtime.getLayerByName(layerparam);
            if (!layer) ret.set_float(0);
            ret.set_float(layer.canvasToLayerY(this.mouseYcanvas));
        }
    };
    exps.AbsoluteX = function (ret) {
        ret.set_float(this.mouseXcanvas);
    };
    exps.AbsoluteY = function (ret) {
        ret.set_float(this.mouseYcanvas);
    };
}());;;
cr.plugins_.Sprite = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var pluginProto = cr.plugins_.Sprite.prototype;
    pluginProto.Type = function (plugin) {
        this.plugin = plugin;
        this.runtime = plugin.runtime;
    };
    var typeProto = pluginProto.Type.prototype;
    typeProto.onCreate = function () {
        var i, leni, j, lenj;
        var anim, frame;
        for (i = 0, leni = this.animations.length; i < leni; i++) {
            anim = this.animations[i];
            anim.name = anim[0];
            anim.speed = anim[1];
            anim.loop = anim[2];
            anim.repeatcount = anim[3];
            anim.repeatto = anim[4];
            anim.pingpong = anim[5];
            anim.frames = anim[6];
            for (j = 0, lenj = anim.frames.length; j < lenj; j++) {
                frame = anim.frames[j];
                frame.texture_file = frame[0];
                frame.texture_filesize = frame[1];
                frame.duration = frame[2];
                frame.hotspotX = frame[3];
                frame.hotspotY = frame[4];
                frame.image_points = frame[5];
                frame.poly_pts = frame[6];
                frame.texture_img = new Image();
                frame.texture_img.src = frame[0];
                frame.texture_img.cr_filesize = frame[1];
                frame.flipped_img = null;
                this.runtime.wait_for_textures.push(frame.texture_img);
                cr.seal(frame);
            }
            cr.seal(anim);
        }
    };
    pluginProto.Instance = function (type) {
        this.type = type;
        this.runtime = type.runtime;
        this.collision_poly = new cr.CollisionPoly(this.type.animations[0].frames[0].poly_pts);
    };
    var instanceProto = pluginProto.Instance.prototype;
    instanceProto.effectToCompositeOp = function (effect) {
        if (effect <= 0 || effect >= 11) return "source-over";
        return ["lighter", "xor", "copy", "destination-over", "source-in", "destination-in", "source-out", "destination-out", "source-atop", "destination-atop"][effect - 1]; // not including "none" so offset by 1
    };
    instanceProto.onCreate = function () {
        this.visible = (this.properties[0] === 0); // 0=visible, 1=invisible
        this.compositeOp = this.effectToCompositeOp(this.properties[2]);
        this.autoMirror = (this.properties[3] === 1); // 0=none, 1=Auto mirror, 2=Auto flip
        this.autoFlip = (this.properties[3] === 2);
        this.isTicking = false;
        if (!(this.type.animations.length === 1 && this.type.animations[0].frames.length === 1) && this.type.animations[0].speed !== 0) {
            this.runtime.tickMe(this);
            this.isTicking = true;
        }
        this.cur_animation = this.type.animations[0];
        this.cur_frame = this.properties[1];
        if (this.cur_frame < 0) this.cur_frame = 0;
        if (this.cur_frame >= this.cur_animation.frames.length) this.cur_frame = this.cur_animation.frames.length - 1;
        this.cur_anim_speed = this.type.animations[0].speed;
        this.frameStart = this.runtime.kahanTime.sum;
        this.animPlaying = true;
        this.animRepeats = 0;
        this.animForwards = true;
        this.animTriggerName = "";
        this.changeAnimName = "";
        this.changeAnimFrom = 0;
        this.changeAnimFrame = -1;
        if (this.runtime.isInstanceYFlipped(this)) this.hotspotY = 1 - this.hotspotY;
        if (this.autoMirror || this.autoFlip) {
            if (!this.recycled) {
                this.add_bbox_changed_callback((function (self) {
                    return function () {
                        self.on_bbox_changed();
                    };
                })(this));
            }
            var i, leni, j, lenj;
            var anim, frame;
            for (i = 0, leni = this.type.animations.length; i < leni; i++) {
                anim = this.type.animations[i];
                for (j = 0, lenj = anim.frames.length; j < lenj; j++) {
                    frame = anim.frames[j];
                    if (!frame.flipped_img) frame.flipped_img = this.runtime.flip(frame.texture_img);
                }
            }
        }
        this.recycled = true;
    };
    instanceProto.on_bbox_changed = function () {
        this.hotspotY = this.cur_animation.frames[this.cur_frame].hotspotY;
        if (this.runtime.isInstanceYFlipped(this)) this.hotspotY = 1 - this.hotspotY;
    };
    instanceProto.tick = function () {
        if (this.changeAnimName.length) this.doChangeAnim();
        if (this.changeAnimFrame >= 0) this.doChangeAnimFrame();
        var now = this.runtime.kahanTime.sum;
        var cur_animation = this.cur_animation;
        var prev_frame = cur_animation.frames[this.cur_frame];
        var next_frame;
        var cur_frame_time = prev_frame.duration / this.cur_anim_speed;
        if (this.animPlaying && now >= this.frameStart + cur_frame_time) {
            if (this.animForwards) {
                this.cur_frame++;
            } else {
                this.cur_frame--;
            }
            this.frameStart += cur_frame_time;
            if (this.cur_frame >= cur_animation.frames.length) {
                if (cur_animation.loop) {
                    if (cur_animation.pingpong) {
                        this.animForwards = false;
                        this.cur_frame = cur_animation.frames.length - 2;
                    } else {
                        this.cur_frame = cur_animation.repeatto;
                    }
                } else {
                    this.animRepeats++;
                    if (this.animRepeats >= cur_animation.repeatcount) {
                        this.cur_frame = cur_animation.frames.length - 1;
                        this.animTriggerName = cur_animation.name;
                        this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
                        this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
                        if (!this.changeAnimName.length && this.changeAnimFrame === -1) this.animPlaying = false;
                    } else if (cur_animation.pingpong) {
                        this.animForwards = false;
                        this.cur_frame = cur_animation.frames.length - 2;
                    } else {
                        this.cur_frame = cur_animation.repeatto;
                    }
                }
            }
            if (this.cur_frame < 0) {
                if (cur_animation.pingpong) {
                    this.cur_frame = 1;
                    this.animForwards = true;
                } else {
                    if (cur_animation.loop) {
                        this.cur_frame = cur_animation.repeatto;
                    } else {
                        this.animRepeats++;
                        if (this.animRepeats >= cur_animation.repeatcount) {
                            this.cur_frame = 0;
                            this.animTriggerName = cur_animation.name;
                            this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnyAnimFinished, this);
                            this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnAnimFinished, this);
                            if (!this.changeAnimName.length && this.changeAnimFrame === -1) this.animPlaying = false;
                        } else {
                            this.cur_frame = cur_animation.repeatto;
                        }
                    }
                }
            }
            if (this.cur_frame < 0) this.cur_frame = 0;
            else if (this.cur_frame >= cur_animation.frames.length) this.cur_frame = cur_animation.frames.length - 1;
            if (now > this.frameStart + (cur_animation.frames[this.cur_frame].duration / this.cur_anim_speed)) {
                this.frameStart = this.runtime.kahanTime.sum;
            }
            next_frame = cur_animation.frames[this.cur_frame];
            this.OnFrameChanged(prev_frame, next_frame);
            this.runtime.redraw = true;
        }
    };
    instanceProto.doChangeAnim = function () {
        var prev_frame = this.cur_animation.frames[this.cur_frame];
        var i, len, a, anim = null;
        for (i = 0, len = this.type.animations.length; i < len; i++) {
            a = this.type.animations[i];
            if (a.name.toLowerCase() === this.changeAnimName.toLowerCase()) {
                anim = a;
                break;
            }
        }
        this.changeAnimName = "";
        if (!anim) return;
        if (anim.name.toLowerCase() === this.cur_animation.name.toLowerCase()) return;
        this.cur_animation = anim;
        this.cur_anim_speed = anim.speed;
        if (this.cur_frame < 0) this.cur_frame = 0;
        if (this.cur_frame >= this.cur_animation.frames.length) this.cur_frame = this.cur_animation.frames.length - 1;
        if (this.changeAnimFrom === 1) this.cur_frame = 0;
        this.animPlaying = true;
        this.frameStart = this.runtime.kahanTime.sum;
        this.animForwards = true;
        this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
        this.runtime.redraw = true;
    };
    instanceProto.doChangeAnimFrame = function () {
        var prev_frame = this.cur_animation.frames[this.cur_frame];
        var prev_frame_number = this.cur_frame;
        this.cur_frame = Math.floor(this.changeAnimFrame);
        if (this.cur_frame < 0) this.cur_frame = 0;
        if (this.cur_frame >= this.cur_animation.frames.length) this.cur_frame = this.cur_animation.frames.length - 1;
        if (prev_frame_number !== this.cur_frame) {
            this.OnFrameChanged(prev_frame, this.cur_animation.frames[this.cur_frame]);
            this.frameStart = this.runtime.kahanTime.sum;
            this.runtime.redraw = true;
        }
        this.changeAnimFrame = -1;
    };
    instanceProto.OnFrameChanged = function (prev_frame, next_frame) {
        var oldw = prev_frame.texture_img.width;
        var oldh = prev_frame.texture_img.height;
        var neww = next_frame.texture_img.width;
        var newh = next_frame.texture_img.height;
        if (oldw != neww) this.width *= (neww / oldw);
        if (oldh != newh) this.height *= (newh / oldh);
        this.hotspotX = next_frame.hotspotX;
        this.hotspotY = next_frame.hotspotY;
        this.collision_poly.set_pts(next_frame.poly_pts);
        this.set_bbox_changed();
        this.runtime.trigger(cr.plugins_.Sprite.prototype.cnds.OnFrameChanged, this);
    };
    instanceProto.draw = function (ctx) {
        if (this.opacity !== 1.0) ctx.globalAlpha = this.opacity;
        if (this.compositeOp !== "source-over") ctx.globalCompositeOperation = this.compositeOp;
        var cur_frame = this.cur_animation.frames[this.cur_frame];
        var cur_image = cur_frame.texture_img;
        if (this.autoMirror) {
            var a = cr.clamp_angle(this.angle);
            if (a > (Math.PI / 2) && a <= ((Math.PI * 3) / 2)) {
                cur_image = cur_frame.flipped_img;
            }
        }
        if (this.autoFlip) {
            var a = cr.clamp_angle(this.angle);
            if (a >= Math.PI) {
                cur_image = cur_frame.flipped_img;
            }
        }
        var myx = this.x;
        var myy = this.y;
        if (this.runtime.pixel_rounding) {
            myx = Math.round(myx);
            myy = Math.round(myy);
        }
        if (this.angle === 0) {
            ctx.drawImage(cur_image, myx - (this.hotspotX * this.width), myy - (this.hotspotY * this.height), this.width, this.height);
        } else {
            ctx.save();
            ctx.translate(myx, myy);
            ctx.rotate(this.angle);
            ctx.drawImage(cur_image, 0 - (this.hotspotX * this.width), 0 - (this.hotspotY * this.height), this.width, this.height);
            ctx.restore();
        }
        if (this.compositeOp !== "source-over") ctx.globalCompositeOperation = "source-over";
        if (this.opacity !== 1.0) ctx.globalAlpha = 1.0;
        /*
ctx.strokeStyle = "#f00";
ctx.lineWidth = 3;
ctx.beginPath();
this.collision_poly.cache_poly(this.width, this.height, this.angle);
var i, len, ax, ay, bx, by;
for (i = 0, len = this.collision_poly.pts_count; i < len; i++)
{
ax = this.collision_poly.pts_cache[i*2] + this.x;
ay = this.collision_poly.pts_cache[i*2+1] + this.y;
bx = this.collision_poly.pts_cache[((i+1)%len)*2] + this.x;
by = this.collision_poly.pts_cache[((i+1)%len)*2+1] + this.y;
ctx.moveTo(ax, ay);
ctx.lineTo(bx, by);
}
ctx.stroke();
ctx.closePath();
*/
        /*
if (this.behavior_insts.length >= 1 && this.behavior_insts[0].draw)
{
this.behavior_insts[0].draw(ctx);
}
*/
    };
    instanceProto.getImagePointIndexByName = function (name_) {
        var cur_frame = this.cur_animation.frames[this.cur_frame];
        var i, len;
        for (i = 0, len = cur_frame.image_points.length; i < len; i++) {
            if (name_.toLowerCase() === cur_frame.image_points[i][0].toLowerCase()) return i;
        }
        return -1;
    };
    instanceProto.getImagePoint = function (imgpt, getX) {
        var cur_frame = this.cur_animation.frames[this.cur_frame];
        var image_points = cur_frame.image_points;
        var index;
        if (typeof imgpt === "string") index = this.getImagePointIndexByName(imgpt);
        else index = imgpt - 1; // 0 is origin
        index = Math.floor(index);
        if (index < 0 || index >= image_points.length) return getX ? this.x : this.y; // return origin
        var x = (image_points[index][1] - cur_frame.hotspotX) * this.width;
        var y = image_points[index][2];
        if (this.runtime.isInstanceYFlipped(this)) y = 1 - y;
        y = (y - cur_frame.hotspotY) * this.height;
        var cosa = Math.cos(this.angle);
        var sina = Math.sin(this.angle);
        var x_temp = (x * cosa) - (y * sina);
        y = (y * cosa) + (x * sina);
        x = x_temp;
        x += this.x;
        y += this.y;
        return getX ? x : y;
    };
    pluginProto.cnds = {};
    var cnds = pluginProto.cnds;

    function collmemory_add(collmemory, a, b) {
        collmemory.push([a, b]);
    };

    function collmemory_remove(collmemory, a, b) {
        var i, j = 0,
            len, entry;
        for (i = 0, len = collmemory.length; i < len; i++) {
            entry = collmemory[i];
            if (!((entry[0] === a && entry[1] === b) || (entry[0] === b && entry[1] === a))) {
                collmemory[j] = collmemory[i];
                j++;
            }
        }
        collmemory.length = j;
    };

    function collmemory_removeInstance(collmemory, inst) {
        var i, j = 0,
            len, entry;
        for (i = 0, len = collmemory.length; i < len; i++) {
            entry = collmemory[i];
            if (entry[0] !== inst && entry[1] !== inst) {
                collmemory[j] = collmemory[i];
                j++;
            }
        }
        collmemory.length = j;
    };

    function collmemory_has(collmemory, a, b) {
        var i, len, entry;
        for (i = 0, len = collmemory.length; i < len; i++) {
            entry = collmemory[i];
            if ((entry[0] === a && entry[1] === b) || (entry[0] === b && entry[1] === a)) return true;
        }
        return false;
    };
    cnds.OnCollision = function (rtype) {
        if (!rtype) return false;
        var runtime = this.runtime;
        var cnd = runtime.getCurrentCondition();
        var ltype = cnd.type;
        if (!cnd.extra.collmemory) {
            cnd.extra.collmemory = [];
            runtime.addDestroyCallback((function (collmemory) {
                return function (inst) {
                    collmemory_removeInstance(collmemory, inst);
                };
            })(cnd.extra.collmemory));
        }
        var lsol = ltype.getCurrentSol();
        var rsol = rtype.getCurrentSol();
        var linstances = lsol.getObjects();
        var rinstances = rsol.getObjects();
        var l, lenl, linst, r, lenr, rinst;
        lsol.select_all = false;
        lsol.instances.length = 1;
        rsol.select_all = false;
        rsol.instances.length = 1;
        var current_event = runtime.getCurrentEventStack().current_event;
        for (l = 0, lenl = linstances.length; l < lenl; l++) {
            linst = linstances[l];
            for (r = 0, lenr = rinstances.length; r < lenr; r++) {
                rinst = rinstances[r];
                if (runtime.testOverlap(linst, rinst) || runtime.checkRegisteredCollision(linst, rinst)) {
                    if (!collmemory_has(cnd.extra.collmemory, linst, rinst)) {
                        collmemory_add(cnd.extra.collmemory, linst, rinst);
                        if (ltype === rtype) {
                            lsol.instances.length = 2; // just use lsol, is same reference as rsol
                            lsol.instances[0] = linst;
                            lsol.instances[1] = rinst;
                        } else {
                            lsol.instances[0] = linst;
                            rsol.instances[0] = rinst;
                        }
                        runtime.pushCopySol(current_event.solModifiers);
                        current_event.retrigger();
                        runtime.popSol(current_event.solModifiers);
                    }
                } else {
                    collmemory_remove(cnd.extra.collmemory, linst, rinst);
                }
            }
        }
        return false;
    };
    var temp_arr = [];
    cnds.IsOverlapping = function (rtype) {
        if (!rtype) return false;
        var runtime = this.runtime;
        var cnd = runtime.getCurrentCondition();
        var ltype = cnd.type;
        var lsol = ltype.getCurrentSol();
        var rsol = rtype.getCurrentSol();
        var linstances = lsol.getObjects();
        var rinstances = rsol.getObjects();
        var l, lenl, linst, r, lenr, rinst;
        var overlapped;
        if (cnd.inverted) {
            var ldest = [];
            for (l = 0, lenl = linstances.length; l < lenl; l++) {
                linst = linstances[l];
                overlapped = false;
                for (r = 0, lenr = rinstances.length; r < lenr; r++) {
                    rinst = rinstances[r];
                    if (runtime.testOverlap(linst, rinst)) {
                        overlapped = true;
                        break;
                    }
                }
                if (!overlapped) ldest.push(linst);
            }
            lsol.select_all = false;
            lsol.instances = ldest;
            return lsol.instances.length;
        } else {
            lsol.select_all = false;
            lsol.instances.length = 1;
            rsol.select_all = false;
            rsol.instances.length = 1;
            var current_event = runtime.getCurrentEventStack().current_event;
            temp_arr.length = 0;
            for (l = 0, lenl = linstances.length; l < lenl; l++) {
                linst = linstances[l];
                for (r = 0, lenr = rinstances.length; r < lenr; r++) {
                    rinst = rinstances[r];
                    if (runtime.testOverlap(linst, rinst)) {
                        if (ltype === rtype) {
                            if (collmemory_has(temp_arr, linst, rinst)) continue;
                            else {
                                collmemory_add(temp_arr, linst, rinst); // prevent running for second instance
                                lsol.instances.length = 2;
                                lsol.instances[0] = linst;
                                lsol.instances[1] = rinst;
                            }
                        } else {
                            lsol.instances[0] = linst;
                            rsol.instances[0] = rinst;
                        }
                        runtime.pushCopySol(current_event.solModifiers);
                        current_event.retrigger();
                        runtime.popSol(current_event.solModifiers);
                    }
                }
            }
            return false;
        }
    };
    cnds.IsAnimPlaying = function (animname) {
        return this.cur_animation.name.toLowerCase() === animname.toLowerCase();
    };
    cnds.CompareFrame = function (cmp, framenum) {
        return cr.do_cmp(this.cur_frame, cmp, framenum);
    };
    cnds.OnAnimFinished = function (animname) {
        return this.animTriggerName.toLowerCase() === animname.toLowerCase();
    };
    cnds.OnAnyAnimFinished = function () {
        return true;
    };
    cnds.OnFrameChanged = function () {
        return true;
    };
    pluginProto.acts = {};
    var acts = pluginProto.acts;
    acts.Spawn = function (obj, layer, imgpt) {
        if (!obj || !layer) return;
        var inst = this.runtime.createInstance(obj, layer, this.getImagePoint(imgpt, true), this.getImagePoint(imgpt, false));
        inst.angle = this.angle;
        inst.set_bbox_changed();
        var cur_act = this.runtime.getCurrentAction();
        var reset_sol = false;
        if (typeof cur_act.extra.Spawn_LastExec === "undefined" || cur_act.extra.Spawn_LastExec < this.runtime.execcount) {
            reset_sol = true;
            cur_act.extra.Spawn_LastExec = this.runtime.execcount;
        }
        var sol = obj.getCurrentSol();
        sol.select_all = false;
        if (reset_sol) {
            sol.instances.length = 1;
            sol.instances[0] = inst;
        } else sol.instances.push(inst);
    };
    acts.SetEffect = function (effect) {
        this.compositeOp = this.effectToCompositeOp(effect);
        this.runtime.redraw = true;
    };
    acts.StopAnim = function () {
        this.animPlaying = false;
    };
    acts.StartAnim = function (from) {
        this.animPlaying = true;
        this.frameStart = this.runtime.kahanTime.sum;
        if (from === 1 && this.cur_frame !== 0) {
            var prev_frame = this.cur_animation.frames[this.cur_frame];
            this.cur_frame = 0;
            this.OnFrameChanged(prev_frame, this.cur_animation.frames[0]);
            this.runtime.redraw = true;
        }
        if (!this.isTicking) {
            this.runtime.tickMe(this);
            this.isTicking = true;
        }
    };
    acts.SetAnim = function (animname, from) {
        this.changeAnimName = animname;
        this.changeAnimFrom = from;
        if (!this.isTicking) {
            this.runtime.tickMe(this);
            this.isTicking = true;
        }
    };
    acts.SetAnimFrame = function (framenumber) {
        this.changeAnimFrame = framenumber;
        if (!this.isTicking) {
            this.runtime.tickMe(this);
            this.isTicking = true;
        }
    };
    acts.SetAnimSpeed = function (s) {
        this.cur_anim_speed = Math.abs(s);
        this.animForwards = (s >= 0);
        if (!this.isTicking) {
            this.runtime.tickMe(this);
            this.isTicking = true;
        }
    };
    pluginProto.exps = {};
    var exps = pluginProto.exps;
    exps.AnimationFrame = function (ret) {
        ret.set_int(this.cur_frame);
    };
    exps.AnimationFrameCount = function (ret) {
        ret.set_int(this.cur_animation.frames.length);
    };
    exps.AnimationName = function (ret) {
        ret.set_string(this.cur_animation.name);
    };
    exps.AnimationSpeed = function (ret) {
        ret.set_float(this.cur_anim_speed);
    };
    exps.ImagePointX = function (ret, imgpt) {
        ret.set_float(this.getImagePoint(imgpt, true));
    };
    exps.ImagePointY = function (ret, imgpt) {
        ret.set_float(this.getImagePoint(imgpt, false));
    };
    exps.ImageWidth = function (ret) {
        ret.set_float(this.cur_animation.frames[this.cur_frame].texture_img.width);
    };
    exps.ImageHeight = function (ret) {
        ret.set_float(this.cur_animation.frames[this.cur_frame].texture_img.height);
    };
}());;;
cr.plugins_.TiledBg = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var pluginProto = cr.plugins_.TiledBg.prototype;
    pluginProto.Type = function (plugin) {
        this.plugin = plugin;
        this.runtime = plugin.runtime;
    };
    var typeProto = pluginProto.Type.prototype;
    typeProto.onCreate = function () {
        this.texture_img = new Image();
        this.texture_img.src = this.texture_file;
        this.texture_img.cr_filesize = this.texture_filesize;
        this.runtime.wait_for_textures.push(this.texture_img);
        this.pattern = null;
    };
    pluginProto.Instance = function (type) {
        this.type = type;
        this.runtime = type.runtime;
    };
    var instanceProto = pluginProto.Instance.prototype;
    instanceProto.effectToCompositeOp = function (effect) {
        if (effect <= 0 || effect >= 11) return "source-over";
        return ["lighter", "xor", "copy", "destination-over", "source-in", "destination-in", "source-out", "destination-out", "source-atop", "destination-atop"][effect - 1]; // not including "none" so offset by 1
    };
    instanceProto.onCreate = function () {
        this.visible = (this.properties[0] === 0); // 0=visible, 1=invisible
        this.compositeOp = this.effectToCompositeOp(this.properties[1]);
    };
    instanceProto.draw = function (ctx) {
        if (!this.type.pattern) this.type.pattern = ctx.createPattern(this.type.texture_img, "repeat");
        ctx.save();
        ctx.globalAlpha = this.opacity;
        ctx.globalCompositeOperation = this.compositeOp;
        ctx.fillStyle = this.type.pattern;
        var myx = this.x;
        var myy = this.y;
        if (this.runtime.pixel_rounding) {
            myx = Math.round(myx);
            myy = Math.round(myy);
        }
        var drawX = -(this.hotspotX * this.width);
        var drawY = -(this.hotspotY * this.height);
        var offX = drawX % this.type.texture_img.width;
        var offY = drawY % this.type.texture_img.height;
        ctx.translate(myx + offX, myy + offY);
        if (this.angle !== 0) ctx.rotate(this.angle);
        ctx.fillRect(-offX - (this.hotspotX * this.width), -offY - (this.hotspotY * this.height), this.width, this.height);
        ctx.restore();
    };
    pluginProto.cnds = {};
    var cnds = pluginProto.cnds;
    pluginProto.acts = {};
    var acts = pluginProto.acts;
    acts.SetEffect = function (effect) {
        this.compositeOp = this.effectToCompositeOp(effect);
        this.runtime.redraw = true;
    };
    pluginProto.exps = {};
    var exps = pluginProto.exps;
}());;;
cr.behaviors.Platform = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var behaviorProto = cr.behaviors.Platform.prototype;
    behaviorProto.Type = function (behavior, objtype) {
        this.behavior = behavior;
        this.objtype = objtype;
        this.runtime = behavior.runtime;
    };
    var behtypeProto = behaviorProto.Type.prototype;
    behtypeProto.onCreate = function () {};
    behaviorProto.Instance = function (type, inst) {
        this.type = type;
        this.behavior = type.behavior;
        this.inst = inst; // associated object instance to modify
        this.runtime = type.runtime;
        this.leftkey = false;
        this.rightkey = false;
        this.jumpkey = false;
        this.jumped = false; // prevent bunnyhopping
        this.ignoreInput = false;
        this.simleft = false;
        this.simright = false;
        this.simjump = false;
        this.lastFloorObject = null;
        this.lastFloorX = 0;
        this.lastFloorY = 0;
        this.dx = 0;
        this.dy = 0;
    };
    var behinstProto = behaviorProto.Instance.prototype;
    behinstProto.onCreate = function () {
        this.maxspeed = this.properties[0];
        this.acc = this.properties[1];
        this.dec = this.properties[2];
        this.jumpStrength = this.properties[3];
        this.g = this.properties[4];
        this.maxFall = this.properties[5];
        this.defaultControls = (this.properties[6] === 1); // 0=no, 1=yes
        if (this.defaultControls) {
            /*
            jQuery(document).keydown((function (self) {
                return function (info) {
                    self.onKeyDown(info);
                };
            })(this));
            jQuery(document).keyup((function (self) {
                return function (info) {
                    self.onKeyUp(info);
                };
            })(this));
            */
        }
        this.runtime.addDestroyCallback((function (self) {
            return function (inst) {
                self.onInstanceDestroyed(inst);
            };
        })(this));
    };
    behinstProto.onInstanceDestroyed = function (inst) {
        if (this.lastFloorObject == inst) this.lastFloorObject = null;
    };
    behinstProto.onDestroy = function () {
        this.lastFloorObject = null;
    };
    behinstProto.onKeyDown = function (info) {
        switch (info.which) {
        case 16:
            // shift
            info.preventDefault();
            this.jumpkey = true;
            break;
        case 37:
            // left
            info.preventDefault();
            this.leftkey = true;
            break;
        case 39:
            // right
            info.preventDefault();
            this.rightkey = true;
            break;
        }
    };
    behinstProto.onKeyUp = function (info) {
        switch (info.which) {
        case 16:
            // shift
            info.preventDefault();
            this.jumpkey = false;
            this.jumped = false;
            break;
        case 37:
            // left
            info.preventDefault();
            this.leftkey = false;
            break;
        case 39:
            // right
            info.preventDefault();
            this.rightkey = false;
            break;
        }
    };
    behinstProto.getGDir = function () {
        if (this.g < 0) return -1;
        else return 1;
    };
    behinstProto.isOnFloor = function () {
        var ret;
        var oldy = this.inst.y;
        this.inst.y += this.getGDir();
        this.inst.set_bbox_changed();
        if (this.lastFloorObject && this.runtime.testOverlap(this.inst, this.lastFloorObject)) {
            this.inst.y = oldy;
            this.inst.set_bbox_changed();
            return this.lastFloorObject;
        } else {
            ret = this.runtime.testOverlapSolid(this.inst);
            this.inst.y = oldy;
            this.inst.set_bbox_changed();
            if (ret && this.runtime.testOverlap(this.inst, ret)) return null;
            return ret;
        }
    };
    behinstProto.tick = function () {
        var dt = this.runtime.getDt(this.inst);
        var mx, my, obstacle;
        if (!this.defaultControls && !this.simjump) this.jumped = false;
        var left = this.leftkey || this.simleft;
        var right = this.rightkey || this.simright;
        var jump = (this.jumpkey || this.simjump) && !this.jumped;
        this.simleft = false;
        this.simright = false;
        this.simjump = false;
        this.inst.y -= this.getGDir();
        this.inst.set_bbox_changed();
        if (this.ignoreInput) {
            left = false;
            right = false;
            jump = false;
        }
        var floor_ = this.isOnFloor();
        var lastFloor = this.lastFloorObject;
        var collobj = this.runtime.testOverlapSolid(this.inst);
        if (collobj) {
            if (this.runtime.pushOutSolidNearest(this.inst, Math.max(this.inst.width, this.inst.height) / 2)) this.runtime.registerCollision(this.inst, collobj);
            else {
                this.inst.y += this.getGDir();
                this.inst.set_bbox_changed();
                return;
            }
        }
        if (floor_) {
            if (this.dy > 0) this.dy = 0;
            if (lastFloor != floor_) {
                this.lastFloorObject = floor_;
                this.lastFloorX = floor_.x;
                this.lastFloorY = floor_.y;
                this.runtime.registerCollision(this.inst, floor_);
            } else if (floor_.x !== this.lastFloorX || floor_.y !== this.lastFloorY) {
                mx = (floor_.x - this.lastFloorX);
                my = (floor_.y - this.lastFloorY);
                this.inst.x += mx;
                this.inst.y += my;
                this.inst.set_bbox_changed();
                this.lastFloorX = floor_.x;
                this.lastFloorY = floor_.y;
                collobj = this.runtime.testOverlapSolid(this.inst);
                if (collobj) {
                    this.runtime.registerCollision(this.inst, collobj);
                    if (mx !== 0) this.runtime.pushOutSolid(this.inst, mx > 0 ? -1 : 1, 0);
                    this.runtime.pushOutSolid(this.inst, 0, -this.getGDir());
                }
            }
            if (jump) {
                this.dy = -this.getGDir() * this.jumpStrength;
                this.jumped = true;
            }
        } else {
            this.lastFloorObject = null;
            this.dy += this.g * dt;
            if (this.getGDir() === 1) {
                if (this.dy > this.maxFall) this.dy = this.maxFall;
            } else {
                if (this.dy < -this.maxFall) this.dy = -this.maxFall;
            }
        }
        if (left == right) // both up or both down
        {
            if (this.dx < 0) {
                this.dx += this.dec * dt;
                if (this.dx > 0) this.dx = 0;
            } else if (this.dx > 0) {
                this.dx -= this.dec * dt;
                if (this.dx < 0) this.dx = 0;
            }
        }
        if (left && !right) {
            if (this.dx > 0) this.dx -= (this.acc + this.dec) * dt;
            else this.dx -= this.acc * dt;
        }
        if (right && !left) {
            if (this.dx < 0) this.dx += (this.acc + this.dec) * dt;
            else this.dx += this.acc * dt;
        }
        if (this.dx > this.maxspeed) this.dx = this.maxspeed;
        else if (this.dx < -this.maxspeed) this.dx = -this.maxspeed;
        if (this.dx !== 0) {
            var oldx = this.inst.x;
            var oldy = this.inst.y;
            mx = this.dx * dt;
            this.inst.x += (mx > 1 ? 1 : -1);
            this.inst.y += -this.getGDir();
            this.inst.set_bbox_changed();
            var slope_too_steep = this.runtime.testOverlapSolid(this.inst);
            this.inst.x = oldx + mx;
            this.inst.y = oldy;
            this.inst.set_bbox_changed();
            obstacle = this.runtime.testOverlapSolid(this.inst);
            if (obstacle) {
                var push_dist = Math.abs(mx) + 1;
                if (slope_too_steep || !this.runtime.pushOutSolid(this.inst, 0, -this.getGDir(), push_dist)) {
                    this.runtime.registerCollision(this.inst, obstacle);
                    push_dist = Math.max(Math.abs(this.dx * dt * 2.5), 30);
                    if (!this.runtime.pushOutSolid(this.inst, this.dx < 0 ? 1 : -1, 0, push_dist)) {
                        this.inst.x = oldx;
                        this.inst.set_bbox_changed();
                    } else if (Math.abs(this.inst.x - oldx) < 1) {
                        this.inst.x = oldx;
                        this.inst.set_bbox_changed();
                    }
                    this.dx = 0; // stop
                }
            } else if (floor_ && !this.isOnFloor()) {
                oldy = this.inst.y;
                this.inst.y += Math.ceil(mx) + 1;
                this.inst.set_bbox_changed();
                if (this.runtime.testOverlapSolid(this.inst)) this.runtime.pushOutSolid(this.inst, 0, -this.getGDir(), Math.ceil(mx) + 2);
                else {
                    this.inst.y = oldy;
                    this.inst.set_bbox_changed();
                }
            }
        }
        if (this.dy !== 0) {
            var oldy = this.inst.y;
            this.inst.y += this.dy * dt;
            this.inst.set_bbox_changed();
            collobj = this.runtime.testOverlapSolid(this.inst);
            if (collobj) {
                this.runtime.registerCollision(this.inst, collobj);
                var push_dist = Math.max(Math.abs(this.dy * dt * 2.5), 30);
                if (!this.runtime.pushOutSolid(this.inst, 0, this.dy < 0 ? 1 : -1, push_dist)) {
                    this.inst.y = oldy;
                    this.inst.set_bbox_changed();
                }
                this.dy = 0; // stop
            }
        }
        this.inst.y += this.getGDir();
        this.inst.set_bbox_changed();
    };
    behaviorProto.cnds = {};
    var cnds = behaviorProto.cnds;
    cnds.IsMoving = function () {
        return this.dx !== 0 || this.dy !== 0;
    };
    cnds.CompareSpeed = function (cmp, s) {
        var speed = Math.sqrt(this.dx * this.dx + this.dy * this.dy);
        return cr.do_cmp(speed, cmp, s);
    };
    cnds.IsOnFloor = function () {
        if (!this.runtime.testOverlapSolid(this.inst)) return false;
        var ret = false;
        var oldy = this.inst.y;
        this.inst.y -= this.getGDir();
        this.inst.set_bbox_changed();
        ret = !this.runtime.testOverlapSolid(this.inst)
        this.inst.y = oldy;
        this.inst.set_bbox_changed();
        return ret;
    };
    cnds.IsJumping = function () {
        if (this.getGDir() === 1) return this.dy < 0;
        else return this.dy > 0;
    };
    cnds.IsFalling = function () {
        if (this.getGDir() === 1) return this.dy > 0;
        else return this.dy < 0;
    };
    behaviorProto.acts = {};
    var acts = behaviorProto.acts;
    acts.SetIgnoreInput = function (ignoring) {
        this.ignoreInput = ignoring;
    };
    acts.SetMaxSpeed = function (maxspeed) {
        this.maxspeed = maxspeed;
        if (this.maxspeed < 0) this.maxspeed = 0;
    };
    acts.SetAcceleration = function (acc) {
        this.acc = acc;
        if (this.acc < 0) this.acc = 0;
    };
    acts.SetDeceleration = function (acc) {
        this.acc = acc;
        if (this.acc < 0) this.acc = 0;
    };
    acts.SetJumpStrength = function (js) {
        this.jumpStrength = js;
        if (this.jumpStrength < 0) this.jumpStrength = 0;
    };
    acts.SetGravity = function (grav) {
        var oldGDir = this.getGDir();
        this.g = grav;
        if (this.getGDir() !== oldGDir) this.lastFloorObject = null;
    };
    acts.SetMaxFallSpeed = function (mfs) {
        this.maxFall = mfs;
        if (this.maxFall < 0) this.maxFall = 0;
    };
    acts.SimulateControl = function (ctrl) {
        switch (ctrl) {
        case 0:
            this.simleft = true;
            break;
        case 1:
            this.simright = true;
            break;
        case 2:
            this.simjump = true;
            break;
        }
    };
    acts.SetVectorX = function (vx) {
        this.dx = vx;
    };
    acts.SetVectorY = function (vy) {
        this.dy = vy;
    };
    behaviorProto.exps = {};
    var exps = behaviorProto.exps;
    exps.Speed = function (ret) {
        ret.set_float(Math.sqrt(this.dx * this.dx + this.dy * this.dy));
    };
    exps.MaxSpeed = function (ret) {
        ret.set_float(this.maxspeed);
    };
    exps.Acceleration = function (ret) {
        ret.set_float(this.acc);
    };
    exps.Deceleration = function (ret) {
        ret.set_float(this.dec);
    };
    exps.JumpStrength = function (ret) {
        ret.set_float(this.jumpStrength);
    };
    exps.Gravity = function (ret) {
        ret.set_float(this.g);
    };
    exps.MaxFallSpeed = function (ret) {
        ret.set_float(this.maxFall);
    };
    exps.MovingAngle = function (ret) {
        ret.set_float(cr.to_degrees(Math.atan2(this.dy, this.dx)));
    };
    exps.VectorX = function (ret) {
        ret.set_float(this.dx);
    };
    exps.VectorY = function (ret) {
        ret.set_float(this.dy);
    };
}());;;
cr.behaviors.Sin = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var behaviorProto = cr.behaviors.Sin.prototype;
    behaviorProto.Type = function (behavior, objtype) {
        this.behavior = behavior;
        this.objtype = objtype;
        this.runtime = behavior.runtime;
    };
    var behtypeProto = behaviorProto.Type.prototype;
    behtypeProto.onCreate = function () {};
    behaviorProto.Instance = function (type, inst) {
        this.type = type;
        this.behavior = type.behavior;
        this.inst = inst; // associated object instance to modify
        this.runtime = type.runtime;
        this.i = 0; // period offset (radians)
    };
    var behinstProto = behaviorProto.Instance.prototype;
    behinstProto.onCreate = function () {
        this.active = (this.properties[0] === 1);
        this.movement = this.properties[1]; // 0=Horizontal|1=Vertical|2=Size|3=Width|4=Height|5=Angle"
        this.period = this.properties[2];
        this.period += Math.random() * this.properties[3]; // period random
        this.i = (this.properties[4] / this.period) * 2 * Math.PI; // period offset
        this.i += ((Math.random() * this.properties[5]) / this.period) * 2 * Math.PI; // period offset random
        this.mag = this.properties[6]; // magnitude
        this.mag += Math.random() * this.properties[7]; // magnitude random
        if (this.period === 0) this.period = 0.01;
        this.initialValue = 0;
        this.ratio = 0;
        switch (this.movement) {
        case 0:
            // horizontal
            this.initialValue = this.inst.x;
            break;
        case 1:
            // vertical
            this.initialValue = this.inst.y;
            break;
        case 2:
            // size
            this.initialValue = this.inst.width;
            this.ratio = this.inst.height / this.inst.width;
            break;
        case 3:
            // width
            this.initialValue = this.inst.width;
            break;
        case 4:
            // height
            this.initialValue = this.inst.height;
            break;
        case 5:
            // angle
            this.initialValue = this.inst.angle;
            this.mag = cr.to_radians(this.mag); // convert magnitude from degrees to radians
            break;
        default:
            ;
        }
    };
    behinstProto.tick = function () {
        var dt = this.runtime.getDt(this.inst);
        if (!this.active || dt === 0) return;
        this.i += (dt / this.period) * 2 * Math.PI;
        this.i = this.i % (2 * Math.PI);
        switch (this.movement) {
        case 0:
            // horizontal
            this.inst.x = this.initialValue + Math.sin(this.i) * this.mag;
            break;
        case 1:
            // vertical
            this.inst.y = this.initialValue + Math.sin(this.i) * this.mag;
            break;
        case 2:
            // size
            this.inst.width = this.initialValue + Math.sin(this.i) * this.mag;
            this.inst.height = this.inst.width * this.ratio;
            break;
        case 3:
            // width
            this.inst.width = this.initialValue + Math.sin(this.i) * this.mag;
            break;
        case 4:
            // height
            this.inst.height = this.initialValue + Math.sin(this.i) * this.mag;
            break;
        case 5:
            // angle
            this.inst.angle = this.initialValue + Math.sin(this.i) * this.mag;
            break;
        }
        this.inst.set_bbox_changed();
    };
    behaviorProto.cnds = {};
    var cnds = behaviorProto.cnds;
    cnds.IsActive = function () {
        return this.active;
    };
    behaviorProto.acts = {};
    var acts = behaviorProto.acts;
    acts.SetActive = function (a) {
        this.active = (a === 1);
    };
    acts.SetPeriod = function (x) {
        this.period = x;
    };
    acts.SetMagnitude = function (x) {
        this.mag = x;
        if (this.movement === 5) // angle
        this.mag = cr.to_radians(this.mag);
    };
    behaviorProto.exps = {};
    var exps = behaviorProto.exps;
    exps.CyclePosition = function (ret) {
        ret.set_float(this.i / (2 * Math.PI));
    };
    exps.Period = function (ret) {
        ret.set_float(this.period);
    };
    exps.Magnitude = function (ret) {
        if (this.movement === 5) // angle
        ret.set_float(cr.to_degrees(this.mag));
        else ret.set_float(this.mag);
    };
}());;;
cr.behaviors.solid = function (runtime) {
    this.runtime = runtime;
};
(function () {
    var behaviorProto = cr.behaviors.solid.prototype;
    behaviorProto.Type = function (behavior, objtype) {
        this.behavior = behavior;
        this.objtype = objtype;
        this.runtime = behavior.runtime;
    };
    var behtypeProto = behaviorProto.Type.prototype;
    behtypeProto.onCreate = function () {};
    behaviorProto.Instance = function (type, inst) {
        this.type = type;
        this.behavior = type.behavior;
        this.inst = inst; // associated object instance to modify
        this.runtime = type.runtime;
    };
    var behinstProto = behaviorProto.Instance.prototype;
    behinstProto.onCreate = function () {};
    behinstProto.tick = function () {};
}());
cr.getProjectModel = function () {
    return [
    null, "Main Menu", [
        [
        cr.plugins_.Keyboard, true, false, false, false, false, false, false],
        [
        cr.plugins_.Mouse, true, false, false, false, false, false, false],
        [
        cr.plugins_.Sprite, false, true, true, true, true, true, true],
        [
        cr.plugins_.TiledBg, false, true, true, true, true, true, true]
    ], [
        ["t0", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/her_ph-default-000.png", 270, 1, 0.5, 0.5, [
                    ["spritecenter", 0.5, 0.543478],
                    ["goal", 0.5, 1]
                ],
                    [-0.5, -0.5, 0.5, -0.5, 0.5, 0.54348, -0.5, 0.54348]
                ]
            ]]
        ],
            [
                ["Platform", cr.behaviors.Platform]
            ], false],
        ["t1", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/him_ph-default-000.png", 270, 1, 0.5, 0.5, [
                    ["spritecenter", 0.5, 0.456522],
                    ["goal", 0.5, 1]
                ],
                    [-0.5, -0.5, 0.5, -0.5, 0.5, 0.54348, -0.5, 0.54348]
                ]
            ]]
        ],
            [
                ["Platform", cr.behaviors.Platform]
            ], false],
        ["t2", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/obs_ph-default-000.png", 157, 1, 0.5, 0.5, [],
                    [-0.5, -0.5, 0.83333, -0.5, 0.83333, 0.83333, -0.5, 0.83333]
                ]
            ]]
        ],
            [
                ["Solid", cr.behaviors.solid]
            ], false],
        ["t3", cr.plugins_.Keyboard, null, null, [], false, []],
        ["t4", cr.plugins_.Sprite, null, [
            ["idle_right", 5, true, 1, 0, false, [
                ["images/him_art-idle_right-000.png", 770, 1, 0.5, 0.479167, [],
                    []
                ],
                ["images/him_art-idle_right-001.png", 768, 1, 0.5, 0.541667, [],
                    []
                ]
            ]],
            ["idle_left", 5, true, 1, 0, false, [
                ["images/him_art-idle_left-000.png", 794, 1, 0.5, 0.479167, [],
                    [0.5, 0.520833, -0.5, 0.520833, -0.5, -0.479167, 0.5, -0.479167]
                ],
                ["images/him_art-idle_left-001.png", 789, 1, 0.5, 0.541667, [],
                    [0.5, 0.458333, -0.5, 0.458333, -0.5, -0.541667, 0.5, -0.541667]
                ]
            ]],
            ["fall_right", 5, false, 1, 0, false, [
                ["images/him_art-fall_right-000.png", 755, 1, 0.5, 0.479167, [],
                    []
                ]
            ]],
            ["fall_left", 5, false, 1, 0, false, [
                ["images/him_art-fall_left-000.png", 778, 1, 0.5, 0.479167, [],
                    []
                ]
            ]]
        ],
            [], false],
        ["t5", cr.plugins_.Sprite, null, [
            ["idle_right", 5, true, 1, 0, false, [
                ["images/her_art-idle_right-000.png", 785, 1, 0.5, 0.5625, [],
                    []
                ],
                ["images/her_art-idle_right-001.png", 789, 1, 0.5, 0.625, [],
                    []
                ]
            ]],
            ["idle_left", 5, true, 1, 0, false, [
                ["images/her_art-idle_left-000.png", 795, 1, 0.5, 0.5625, [],
                    [0.5, 0.4375, -0.5, 0.4375, -0.5, -0.5625, 0.5, -0.5625]
                ],
                ["images/her_art-idle_left-001.png", 797, 1, 0.5, 0.625, [],
                    [0.5, 0.375, -0.5, 0.375, -0.5, -0.625, 0.5, -0.625]
                ]
            ]],
            ["fall_right", 5, false, 1, 0, false, [
                ["images/her_art-fall_right-000.png", 772, 1, 0.5, 0.5625, [],
                    []
                ]
            ]],
            ["fall_left", 5, false, 1, 0, false, [
                ["images/her_art-fall_left-000.png", 787, 1, 0.5, 0.5625, [],
                    [0.5, 0.4375, -0.5, 0.4375, -0.5, -0.5625, 0.5, -0.5625]
                ]
            ]]
        ],
            [], false],
        ["t6", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/switcher_ph-default-000.png", 140, 1, 0.5, 0.5, [],
                    [-0.5, -0.5, 1.5, -0.5, 1.5, 1.5, -0.5, 1.5]
                ]
            ]]
        ],
            [], false],
        ["t7", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/spikes-default-000.png", 439, 1, 0, 1, [],
                    [0.183594, -0.523437, 0.80599, -0.528646, 0.80599, 0, 0.186198, 0]
                ]
            ]]
        ],
            [
                ["Solid", cr.behaviors.solid]
            ], false],
        ["t8", cr.plugins_.Sprite, null, [
            ["off", 5, false, 1, 0, false, [
                ["images/goal_him_art-off-000.png", 391, 1, 0.5, 1, [],
                    [-0.020833, -0.138021, 0.100694, -0.143229, 0.104167, 0, -0.027778, 0]
                ]
            ]],
            ["on", 5, false, 1, 0, false, [
                ["images/goal_him_art-on-000.png", 762, 1, 0.5, 1, [],
                    [-0.020833, -0.087798, 0.083333, -0.090774, 0.083333, 0, -0.020833, 0]
                ]
            ]]
        ],
            [], false],
        ["t9", cr.plugins_.Sprite, null, [
            ["off", 5, false, 1, 0, false, [
                ["images/goal_her_art-off-000.png", 411, 1, 0.5, 1, [],
                    [-0.010417, -0.136719, 0.100694, -0.134115, 0.098958, 0, -0.012153, 0]
                ]
            ]],
            ["on", 5, false, 1, 0, false, [
                ["images/goal_her_art-on-000.png", 734, 1, 0.5, 1, [],
                    [-0.00650999, -0.071429, 0.058594, -0.071429, 0.058594, 0, -0.00911501, 0]
                ]
            ]]
        ],
            [], false],
        ["t10", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/box-default-000.png", 462, 1, 0.5, 0.5, [],
                    []
                ]
            ]]
        ],
            [
                ["Solid", cr.behaviors.solid],
                ["Platform", cr.behaviors.Platform]
            ], false],
        ["t11", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/fadewindow-default-000.png", 183, 1, 0, 0, [],
                    []
                ]
            ]]
        ],
            [], false],
        ["t12", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/play-btn-conv.png", 957, 1, 0.5, 0.507937, [],
                    [-0.458333, -0.412698, 0, -0.507937, 0.458333, -0.412698, 0.5, -0.0158736, 0.458333, 0.396825, 0, 0.492063, -0.458333, 0.396825, -0.5, -0.0158736]

                ]
            ]]
        ],
            [], false],
        ["t13", cr.plugins_.Mouse, null, null, [], false, []],
        ["t14", cr.plugins_.TiledBg, ["images/grass_tile.png", 408], null, [], false],
        ["t15", cr.plugins_.TiledBg, ["images/grass_top_left.png", 471], null, [], false],
        ["t16", cr.plugins_.TiledBg, ["images/grass_top_tile.png", 371], null, [], false],
        ["t17", cr.plugins_.TiledBg, ["images/grass_top_right.png", 440], null, [], false],
        ["t18", cr.plugins_.TiledBg, ["images/grass_bot_left.png", 466], null, [], false],
        ["t19", cr.plugins_.TiledBg, ["images/grass_bot_tile.png", 395], null, [], false],
        ["t20", cr.plugins_.TiledBg, ["images/grass_bot_right.png", 472], null, [], false],
        ["t21", cr.plugins_.TiledBg, ["images/platform_tile.png", 345], null, [], false],
        ["t22", cr.plugins_.TiledBg, ["images/grass_1_left.png", 452], null, [], false],
        ["t23", cr.plugins_.TiledBg, ["images/grass_1_tile.png", 347], null, [], false],
        ["t24", cr.plugins_.TiledBg, ["images/grass_1_right.png", 450], null, [], false],
        ["t25", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/hrt_container-default-000.png", 815, 1, 0.5, 0.5, [],
                    []
                ]
            ]]
        ],
            [], false],
        ["t26", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/heart-default-000.png", 335, 1, 0.5, 0.4, [],
                    []
                ]
            ]]
        ],
            [
                ["Sine", cr.behaviors.Sin]
            ], false],
        ["t27", cr.plugins_.TiledBg, ["images/notice_top_left.png", 387], null, [], false],
        ["t28", cr.plugins_.TiledBg, ["images/notice_top_tile.png", 262], null, [], false],
        ["t29", cr.plugins_.TiledBg, ["images/notice_top_right.png", 370], null, [], false],
        ["t30", cr.plugins_.TiledBg, ["images/notice_mid_left.png", 246], null, [], false],
        ["t31", cr.plugins_.TiledBg, ["images/notice_mid_tile.png", 223], null, [], false],
        ["t32", cr.plugins_.TiledBg, ["images/notice_mid_right.png", 243], null, [], false],
        ["t33", cr.plugins_.TiledBg, ["images/notice_bot_left.png", 274], null, [], false],
        ["t34", cr.plugins_.TiledBg, ["images/notice_bot_tile.png", 244], null, [], false],
        ["t35", cr.plugins_.TiledBg, ["images/notice_bot_right.png", 276], null, [], false],
        ["t36", cr.plugins_.Sprite, null, [
            ["Default", 5, true, 1, 0, true, [
                ["images/switcher_art-default-000.png", 317, 1, 0.5, 0.5, [],
                    [-0.1875, -0.1875, 0, -0.125, 0.125, -0.125, 0.5, 0, 0.1875, 0.1875, 0, 0.1875, -0.125, 0.125, -0.5, 0]
                ],
                ["images/switcher_art-default-001.png", 329, 1, 0.5, 0.5, [],
                    [-0.25, -0.25, 0, -0.25, 0.125, -0.125, 0.5, 0, 0.25, 0.25, 0, 0.1875, -0.125, 0.125, -0.5, 0]
                ],
                ["images/switcher_art-default-002.png", 328, 1, 0.5, 0.5, [],
                    [-0.3125, -0.3125, 0, -0.25, 0.1875, -0.1875, 0.5, 0, 0.3125, 0.3125, 0, 0.3125, -0.5, 0]
                ],
                ["images/switcher_art-default-003.png", 336, 1, 0.5, 0.5, [],
                    [-0.375, -0.375, 0, -0.375, 0.25, -0.25, 0.5, 0, 0.375, 0.375, 0, 0.3125, -0.25, 0.25, -0.5, 0]
                ]
            ]]
        ],
            [], false],
        ["t37", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/logo_art-default-000.png", 5232, 1, 0, 0, [],
                    [0, 0, 0.499171, 0, 0.991708, 0.0406504, 0.985075, 0.926829, 0.0149254, 0.926829]
                ]
            ]]
        ],
            [], false],
        ["t38", cr.plugins_.TiledBg, ["images/cloud_art.png", 1681], null, [], false],
        ["t39", cr.plugins_.TiledBg, ["images/sky_bg_art.png", 153], null, [], false],
        ["t40", cr.plugins_.TiledBg, ["images/prop_stone.png", 291], null, [], false],
        ["t41", cr.plugins_.TiledBg, ["images/prop_grass.png", 288], null, [], false],
        ["t42", cr.plugins_.TiledBg, ["images/prop_flower.png", 315], null, [], false],
        ["t43", cr.plugins_.TiledBg, ["images/prop_vines.png", 716], null, [], false],
        ["t44", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/door_art-default-000.png", 510, 1, 0.5, 0.5, [],
                    []
                ]
            ]]
        ],
            [
                ["Solid", cr.behaviors.solid]
            ], false],
        ["t45", cr.plugins_.Sprite, null, [
            ["off", 5, false, 1, 0, false, [
                ["images/door_switch_art-off-000.png", 267, 1, 0.5, 0.75, [],
                    [-0.4375, -0.5, 0, -0.75, 0.4375, -0.5, 0.5, -0.25, 0.4375, 0, 0, 0.25, -0.4375, 0, -0.5, -0.25]
                ]
            ]],
            ["on", 5, false, 1, 0, false, [
                ["images/door_switch_art-on-000.png", 235, 1, 0.5, 0.666667, [],
                    [-0.4375, -0.333334, 0, -0.666667, 0.4375, -0.333334, 0.5, -0.222223, 0.4375, 2.98023e-007, 0, 0.333333, -0.4375, 2.98023e-007, -0.5, -0.222223]
                ]
            ]]
        ],
            [], false],
        ["t46", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/goal_him_ph-default-000.png", 164, 1, 0.5, 1, [],
                    []
                ]
            ]]
        ],
            [], false],
        ["t47", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/goal_her_ph-default-000.png", 167, 1, 0.5, 1, [],
                    [-3, -3.5, 3, -3.5, 3, 2.5, -3, 2.5]
                ]
            ]]
        ],
            [], false],
        ["t48", cr.plugins_.TiledBg, ["images/grass_1_top.png", 525], null, [], false],
        ["t49", cr.plugins_.TiledBg, ["images/grass_1_bot.png", 536], null, [], false],
        ["t50", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/goal_her_det-default-000.png", 330, 1, 0.5, 1, [],
                    [-3, -3.5, 3, -3.5, 3, 2.5, -3, 2.5]
                ]
            ]]
        ],
            [], false],
        ["t51", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/goal_him_det-default-000.png", 360, 1, 0.5, 1, [],
                    []
                ]
            ]]
        ],
            [], false],
        ["t52", cr.plugins_.TiledBg, ["images/mainmenu_bg.png", 171405], null, [], false],
        ["t53", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 10, 121, true, [
                ["images/transparent.png", 101132, 10, 3.5, 3.507937, [],
                    [-4.458333, -0.412698, 0, -0.507937, 0.458333, -0.412698, 0.5, -0.0158736, 0.458333, 0.396825, 0, 0.492063, -0.458333, 0.396825, -0.5, -0.0158736]
                ]
            ]]
        ],
            [], false],
        ["t54", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/back_btn-default-000.png", 811, 1, 0.5, 0.507937, [],
                    [-0.441177, -0.412698, 0, -0.507937, 0.441176, -0.412698, 0.5, -0.0158736, 0.441176, 0.396825, 0, 0.492063, -0.441177, 0.396825, -0.5, -0.0158736]
                ]
            ]]
        ],
            [], false],
        ["t55", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/him_menu_art-default-000.png", 940, 1, 0.5, 1, [],
                    [-0.346154, -0.846154, 0, -1, 0.346154, -0.846154, 0.423077, -0.5, 0.346154, -0.153846, 0, 0, -0.269231, -0.230769, -0.5, -0.5]
                ]
            ]]
        ],
            [], false],
        ["t56", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/her_menu_art-default-000.png", 920, 1, 0.5, 1, [],
                    [-0.357143, -0.846154, 0, -1, 0.357143, -0.846154, 0.428571, -0.5, 0.428571, -0.076923, 0, 0, -0.285714, -0.230769, -0.428571, -0.5]
                ]
            ]]
        ],
            [], false],
        ["t57", cr.plugins_.TiledBg, ["images/mainmenu_about_txt.png", 8547], null, [], false],
        ["t58", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/tut_1_walk-default-000.png", 1366, 1, 0, 0, [],
                    [0.227642, 0.321839, 0.495935, 0, 0.772358, 0.321839, 0.821138, 0.494253, 1, 1, 0.495935, 0.931035, 0.0487805, 0.931035, 0.162602, 0.494253]
                ]
            ]]
        ],
            [], false],
        ["t59", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/tut_2_flip-default-000.png", 1196, 1, 0, 0, [],
                    [0.357724, 0.505747, 0.495935, 0, 0.626016, 0.528736, 0.626016, 0.494253, 0.926829, 0.896552, 0.495935, 0.896552, 0.0487805, 0.931035, 0.357724, 0.494253]
                ]
            ]]
        ],
            [], false],
        ["t60", cr.plugins_.Sprite, null, [
            ["Default", 5, false, 1, 0, false, [
                ["images/tut_3_door-default-000.png", 1418, 1, 0, 0, [],
                    [0.0487805, 0.0571429, 0.495935, 0, 1, 0, 0.780488, 0.742857, 0.495935, 1, 0.219512, 0.742857]
                ]
            ]]
        ],
            [], false],
        ["t61", cr.plugins_.TiledBg, ["images/notice_window.png", 548], null, [], false],
        ["t62", cr.plugins_.TiledBg, ["images/notice_door.png", 689], null, [], false],
        ["t63", cr.plugins_.TiledBg, ["images/tiledbackground.png", 17506], null, [], false]
    ], [
        ["Main Menu", 960, 640, false, "Main Menu Sheet", [
            ["Layer 0", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 52, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 752, 0, 192, 146, 0, 0, 1, 0.5, 0.507937], 12, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, -124, 0, 603, 123, 0, 0, 1, 0, 0], 37, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 832, 0, 144, 63, 0, 0, 1, 0.5, 0.507937], 53, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 688, 0, 102, 63, 0, 0, 1, 0.5, 0.507937], 54, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [320, 736, 0, 78, 78, 0, 0, 1, 0.5, 1], 55, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [640, 736, 0, 84, 78, 0, 0, 1, 0.5, 1], 56, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [136, 229, 0, 672, 192, 0, 0, 1, 0, 0], 57, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Skeleton", 960, 640, false, "Skeleton Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [396, 420, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [516, 252, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [12, 324, 0, 24, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [948, 324, 0, 24, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 12, 0, 912, 24, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 636, 0, 912, 24, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 366, 0, 192, 36, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 366, 0, 168, 36, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [456, -180, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, -264, 0, 72, 72, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [204, -216, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [60, -144, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, -204, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [60, -204, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -204, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, -84, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [60, -84, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -84, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -144, 0, 48, 48, 0, 0, 1, 0, 0], 21, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, -264, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [60, -264, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -264, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -204, 0, 48, 48, 0, 0, 1, 0, 0], 27, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -204, 0, 48, 48, 0, 0, 1, 0, 0], 28, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -204, 0, 48, 48, 0, 0, 1, 0, 0], 29, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -144, 0, 48, 48, 0, 0, 1, 0, 0], 30, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -144, 0, 48, 48, 0, 0, 1, 0, 0], 31, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -144, 0, 48, 48, 0, 0, 1, 0, 0], 32, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -84, 0, 48, 48, 0, 0, 1, 0, 0], 33, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -84, 0, 48, 48, 0, 0, 1, 0, 0], 34, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -84, 0, 48, 48, 0, 0, 1, 0, 0], 35, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [360, -312, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, -312, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [228, -336, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [300, -336, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [780, -336, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [840, -288, 0, 48, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [780, -276, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, -336, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [900, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [840, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [36, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 1", 2400, 640, false, "Level 1 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [2208, 120, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 504, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, 324, 0, 96, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [2352, 324, 0, 96, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 48, 0, 2208, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 588, 0, 2208, 120, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 312, 0, 240, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 144, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [2208, 480, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 0.25, 0, 1, false, 1, [
                [
                    [0, 0, 0, 1344, 648, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 144, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 336, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [576, 480, 0, 264, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1128, 312, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1128, 264, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, 0, 0, 96, 648, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1080, 264, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 528, 0, 2016, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1272, 264, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1080, 312, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 48, 0, 2016, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1272, 312, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 384, 0, 48, 48, 0, 0, 1, 0, 0], 27, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 384, 0, 96, 48, 0, 0, 1, 0, 0], 28, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 384, 0, 48, 48, 0, 0, 1, 0, 0], 29, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 432, 0, 48, 48, 0, 0, 1, 0, 0], 30, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 432, 0, 96, 48, 0, 0, 1, 0, 0], 31, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 432, 0, 48, 48, 0, 0, 1, 0, 0], 32, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 480, 0, 48, 48, 0, 0, 1, 0, 0], 33, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 480, 0, 96, 48, 0, 0, 1, 0, 0], 34, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 480, 0, 48, 48, 0, 0, 1, 0, 0], 35, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1200, 264, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 360, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 312, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [1200, 312, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 10, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 576, 0, 2208, 72, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 0, 0, 2208, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2304, 0, 0, 96, 648, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 144, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 144, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 48, 0, 192, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2160, 432, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2112, 432, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2112, 480, 0, 192, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2256, 240, 0, 48, 48, 0, 3.14159, 1, 0, 0], 27, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2208, 240, 0, 96, 48, 0, 3.14159, 1, 0, 0], 28, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2112, 240, 0, 48, 48, 0, 3.14159, 1, 0, 0], 29, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2256, 192, 0, 48, 48, 0, 3.14159, 1, 0, 0], 30, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2208, 192, 0, 96, 48, 0, 3.14159, 1, 0, 0], 31, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2112, 192, 0, 48, 48, 0, 3.14159, 1, 0, 0], 32, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2256, 144, 0, 48, 48, 0, 3.14159, 1, 0, 0], 33, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2208, 144, 0, 96, 48, 0, 3.14159, 1, 0, 0], 34, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [2112, 144, 0, 48, 48, 0, 3.14159, 1, 0, 0], 35, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 480, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1944, 480, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1368, 480, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [696, 96, 0, 48, 192, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 96, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1272, 216, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1560, 96, 0, 48, 144, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1920, 96, 0, 48, 192, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [1728, 96, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, 192, 0, 48, 144, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 480, 0, 72, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 480, 0, 168, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [420, 414, 0, 123, 87, 0, 0, 1, 0, 0], 58, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [2220, 210, 0, 123, 87, 0, 3.14159, 1, 0, 0], 59, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 2", 960, 640, false, "Level 2 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [96, 360, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 552, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [24, 324, 0, 48, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 324, 0, 96, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 24, 0, 816, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 612, 0, 864, 72, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 336, 0, 432, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 456, 0, 96, 336, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 168, 0, 384, 336, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 528, 0, 96, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 72, 0, 240, 144, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 648, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [552, 120, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [72, 312, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [384, 288, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 288, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 336, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 336, 0, 288, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 96, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [504, 240, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 528, 0, 144, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 48, 0, 48, 192, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [696, 528, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 288, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [479, 384, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 336, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 336, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 288, 0, 48, 336, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 624, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 0, 0, 144, 336, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 336, 0, 96, 288, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [408, 240, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 576, 0, 192, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 576, 0, 432, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, 624, 0, 960, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 48, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 288, 0, 192, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, 0, 0, 240, 288, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 432, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 336, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 480, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 480, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 528, 0, 96, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 264, 0, 48, 48, 0, 3.14159, 1, 0, 0], 27, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 264, 0, 144, 48, 0, 3.14159, 1, 0, 0], 28, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, 264, 0, 48, 48, 0, 3.14159, 1, 0, 0], 29, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 216, 0, 48, 96, 0, 3.14159, 1, 0, 0], 30, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 216, 0, 144, 96, 0, 3.14159, 1, 0, 0], 31, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, 216, 0, 48, 96, 0, 3.14159, 1, 0, 0], 32, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 120, 0, 48, 48, 0, 3.14159, 1, 0, 0], 33, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 120, 0, 144, 48, 0, 3.14159, 1, 0, 0], 34, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, 120, 0, 48, 48, 0, 3.14159, 1, 0, 0], 35, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 432, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 96, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 0, 0, 192, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 0, 0, 288, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 408, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 456, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 504, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 552, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 288, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [128, 116, 0, 123, 105, 0, 0, 1, 0, 0], 60, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 3", 960, 640, false, "Level 3 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [552, 72, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 264, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [24, 324, 0, 48, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [936, 324, 0, 48, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 24, 0, 864, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 612, 0, 864, 72, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 168, 0, 96, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, 192, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 336, 0, 144, 384, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 408, 0, 192, 240, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 168, 0, 336, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 240, 0, 48, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 312, 0, 96, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 396, 0, 144, 216, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 504, 0, 288, 144, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 144, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 168, 0, 432, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [888, 48, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 648, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [552, 336, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 120, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 48, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 192, 0, 144, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 192, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 144, 0, 192, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 0, 0, 768, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 288, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 144, 0, 288, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [72, 144, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, 240, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, 192, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, 192, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 120, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 48, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 288, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 96, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 144, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 288, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 96, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 96, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 480, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 144, 0, 96, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 144, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [912, 0, 0, 48, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 48, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 0, 0, 96, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 192, 0, 48, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 336, 0, 192, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 576, 0, 336, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 432, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 624, 0, 864, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 336, 0, 144, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 432, 0, 96, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [648, 72, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 576, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 288, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 288, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 288, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 480, 0, 288, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 240, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 528, 0, 240, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 240, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 336, 0, 48, 120, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 96, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 528, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 432, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 4", 960, 640, false, "Level 4 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [120, 456, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 216, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, 324, 0, 96, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 324, 0, 96, 648, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 612, 0, 768, 72, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 48, 0, 768, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 408, 0, 48, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 288, 0, 288, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 336, 0, 192, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 456, 0, 336, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 120, 0, 96, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 420, 0, 48, 120, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 648, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 168, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [-48, 24, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [192, 528, 0, 432, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 240, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 288, 0, 144, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 240, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 384, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 48, 0, 240, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 432, 0, 240, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 432, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 336, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 240, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 432, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 432, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 240, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 432, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 432, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 240, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 96, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 96, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 288, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 240, 0, 288, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 288, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 48, 0, 432, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 384, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 432, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 288, 0, 48, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 288, 0, 48, 336, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 624, 0, 768, 24, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, 0, 0, 96, 648, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 648, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 0, 0, 768, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 48, 0, 96, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, 288, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 576, 0, 672, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 576, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 576, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 576, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 576, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 192, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 192, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 528, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 96, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 96, 0, 48, 192, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 96, 0, 48, 48, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 384, 0, 96, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 5", 960, 640, false, "Level 5 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [528, 72, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 216, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        220, 2500, 2500, 0, 2500, 300, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [24, 336, 0, 48, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [936, 336, 0, 48, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 24, 0, 864, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 648, 0, 864, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 288, 0, 624, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 384, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 576, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 144, 0, 144, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 384, 0, 144, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 408, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 528, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 528, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 216, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [840, 144, 0, 144, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 384, 0, 240, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 600, 0, 336, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 672, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 0, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [72, 360, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [384, 240, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 240, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 240, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 336, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 384, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 384, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 384, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 384, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 384, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [792, 432, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 336, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 240, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 240, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 432, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 432, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 432, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 48, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [912, 0, 0, 48, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 0, 0, 144, 384, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 384, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 336, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [792, 384, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 240, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 288, 0, 336, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 288, 0, 144, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 480, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 480, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 480, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 576, 0, 48, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 240, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 192, 0, 48, 48, 0, 0, 1, 0, 0], 48, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 528, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 528, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 528, 0, 48, 48, 0, 0, 1, 0, 0], 48, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 0, 0, 576, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 192, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 0, 0, 144, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 624, 0, 576, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 576, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 624, 0, 240, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [792, 384, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 48, 0, 48, 120, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 336, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 576, 0, 96, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 192, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 576, 0, 336, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 6", 960, 640, false, "Level 6 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [816, 120, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 216, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 336, 0, 96, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 24, 0, 672, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 336, 0, 96, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 624, 0, 288, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, 288, 0, 288, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 600, 0, 240, 144, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 648, 0, 432, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 312, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 48, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 96, 0, 288, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 72, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 360, 0, 96, 240, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 456, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 192, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 672, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 288, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [96, 288, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 288, 0, 96, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 240, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 240, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 240, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 288, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 288, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 432, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [168, 336, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 240, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 288, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 288, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 480, 0, 144, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [168, 384, 0, 72, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 528, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 336, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [552, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 288, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 288, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 216, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 264, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, -72, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 288, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 432, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 432, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 288, 0, 96, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 432, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 528, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 528, 0, 192, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 96, 0, 240, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 0, 0, 240, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 0, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 48, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 624, 0, 288, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 576, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 576, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 576, 0, 336, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 624, 0, 288, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [-48, 0, 0, 96, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 0, 0, 288, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 576, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 0, 0, 144, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 48, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 0, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 96, 0, 48, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [840, 528, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 96, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [744, 168, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 48, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 7", 960, 640, false, "Level 7 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [216, 168, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 168, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, 336, 0, 96, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [888, 144, 0, 144, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 48, 0, 816, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 360, 0, 144, 336, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 624, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 240, 0, 288, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 360, 0, 192, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 144, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 624, 0, 480, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 648, 0, 288, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 480, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 384, 0, 48, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 432, 0, 96, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 312, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [24, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [72, 72, 0, 792, 552, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [408, 168, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [720, 192, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -216, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 96, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 192, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 192, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 192, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 480, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -144, 0, 48, 48, 0, 0, 1, 0, 0], 21, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [0, -264, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [60, -264, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [120, -264, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -204, 0, 48, 48, 0, 0, 1, 0, 0], 27, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -204, 0, 48, 48, 0, 0, 1, 0, 0], 28, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -204, 0, 48, 48, 0, 0, 1, 0, 0], 29, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -144, 0, 48, 48, 0, 0, 1, 0, 0], 30, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -144, 0, 48, 48, 0, 0, 1, 0, 0], 31, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -144, 0, 48, 48, 0, 0, 1, 0, 0], 32, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [204, -84, 0, 48, 48, 0, 0, 1, 0, 0], 33, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [264, -84, 0, 48, 48, 0, 0, 1, 0, 0], 34, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [324, -84, 0, 48, 48, 0, 0, 1, 0, 0], 35, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [744, 288, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 192, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 384, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 144, 0, 48, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 144, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [408, 96, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 384, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 624, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 0, 0, 864, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 48, 0, 144, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 240, 0, 96, 432, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 624, 0, 384, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 624, 0, 192, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 192, 0, 96, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 192, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 432, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 576, 0, 336, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 576, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 624, 0, 192, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 576, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 576, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 480, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 240, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 240, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [744, 240, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 240, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 192, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 48, 0, 528, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 48, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 288, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 432, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 432, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 288, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 48, 0, 48, 240, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 240, 0, 96, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 240, 0, 48, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 240, 0, 144, 240, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 432, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 240, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 384, 0, 48, 48, 0, 0, 1, 0, 0], 48, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 432, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [552, 192, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [36, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 8", 960, 640, false, "Level 8 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [96, 552, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 600, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [24, 336, 0, 48, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 336, 0, 96, 672, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [492, 24, 0, 888, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 648, 0, 864, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 480, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 480, 0, 384, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 504, 0, 144, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 480, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 432, 0, 48, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, 456, 0, 192, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 360, 0, 336, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 192, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 408, 0, 96, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 408, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 192, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 192, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 96, 0, 48, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 240, 0, 48, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -24, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 648, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [-144, 192, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 0, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 48, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 144, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 432, 0, 96, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 144, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 192, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 0, 0, 432, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 192, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 336, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 336, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 336, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 144, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 240, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 96, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [744, 336, 0, 120, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [648, 96, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [216, 240, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 528, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 528, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 528, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [864, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 48, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 0, 0, 336, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 192, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 192, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 480, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 480, 0, 288, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [48, 624, 0, 816, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 432, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 384, 0, 96, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 144, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 144, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 144, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 192, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 144, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 192, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 144, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 192, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 144, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 192, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 0, 0, 48, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 192, 0, 48, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 336, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 336, 0, 96, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 432, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 384, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 432, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, 432, 0, 144, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 432, 0, 144, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 384, 0, 48, 48, 0, 0, 1, 0, 0], 48, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 480, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 480, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 336, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 384, 0, 48, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 432, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [144, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 504, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 504, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 504, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [72, 408, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 192, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 192, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 240, 0, 48, 144, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, -48, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 9", 960, 1800, false, "Level 9 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [768, 120, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 1176, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, 912, 0, 96, 1824, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, -24, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 912, 0, 96, 1824, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 48, 0, 768, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 1728, 0, 768, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 384, 0, 192, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 456, 0, 432, 144, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 360, 0, 384, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 120, 0, 336, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 96, 0, 48, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 96, 0, 240, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 408, 0, 48, 144, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 456, 0, 192, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 768, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 888, 0, 96, 336, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 984, 0, 144, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 744, 0, 192, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 1032, 0, 288, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 744, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [840, 984, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 1224, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 1224, 0, 288, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 1008, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 840, 0, 144, 24, 0, 0, 1, 0.5, 0.5], 6, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 816, 0, 96, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 816, 0, 96, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [840, 1464, 0, 144, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 1632, 0, 384, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 1224, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [552, 1344, 0, 48, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 1440, 0, 144, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 0, 0.25, 1, false, 1, [
                [
                    [72, 0, 0, 816, 960, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [168, 192, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [600, 504, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [72, 648, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 96, 1824, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 336, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 336, 0, 144, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 720, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 96, 0, 144, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 96, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 960, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 720, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 720, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 1392, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 1488, 0, 36, 48, 0, 3.14159, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 1152, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1152, 0, 144, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 1536, 0, 48, 48, 0, 0, 1, 0, 0], 40, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [168, 144, 0, 48, 144, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [192, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, -48, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [864, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 336, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 96, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 1104, 0, 96, 768, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 792, 0, 288, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 528, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 528, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 960, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 960, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 720, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 1200, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 1200, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 1080, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 960, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 1128, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 1176, 0, 48, 48, 0, 1.5708, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 1440, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 1440, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    0],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 1824, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 0, 0, 768, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 48, 0, 336, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 48, 0, 192, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 48, 0, 192, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 432, 0, 432, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 384, 0, 192, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 480, 0, 336, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 1008, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 1008, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 816, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 960, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 1392, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 720, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 720, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 1584, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 768, 0, 96, 672, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1680, 0, 768, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 384, 0, 384, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 1584, 0, 288, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1632, 0, 432, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 1392, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 960, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 1008, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 816, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 768, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 720, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 720, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 48, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 384, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 1248, 0, 48, 192, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 960, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 1008, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 1392, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [312, 1440, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 1440, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        1, 0, 4, 0, 0, 0, 50, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 1632, 0, 336, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 768, 0, 144, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 960, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [672, 1200, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [768, 1440, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 1200, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 1200, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1200, 0, 192, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1008, 0, 144, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 1200, 0, 48, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [720, 1200, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 768, 0, 48, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 768, 0, 96, 240, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 1008, 0, 48, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 336, 0, 48, 48, 0, 0, 1, 0, 0], 48, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 96, 0, 48, 48, 0, 0, 1, 0, 0], 49, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [648, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [552, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 360, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [360, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [552, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 120, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 744, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 744, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 744, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [552, 744, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 840, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 840, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 840, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [120, 984, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 984, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 984, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [696, 456, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [744, 456, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 456, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [840, 456, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 36, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 528, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [696, 1248, 0, 48, 96, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [816, 288, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [240, 1344, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [408, 1056, 0, 48, 216, 0, 0, 1, 0, 0], 43, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [36, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, -288, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["Level 10", 960, 1280, false, "Level 10 Sheet", [
            ["DESIGN", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [768, 1032, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 0, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 1032, 0, 32, 46, 0, 0, 1, 0.5, 0.5], 1, [],
                    [
                        [
                        200, 2500, 2500, 0, 2500, 250, 0]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [48, 672, 0, 96, 1344, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 48, 0, 768, 96, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [912, 672, 0, 96, 1344, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 1200, 0, 768, 288, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 792, 0, 384, 240, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 50, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, -48, 0, 12, 8, 0, 0, 1, 0.5, 1], 51, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 792, 0, 384, 240, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 360, 0, 384, 48, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 432, 0, 192, 192, 0, 0, 1, 0.5, 0.5], 2, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 46, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -72, 0, 8, 8, 0, 0, 1, 0.5, 1], 47, [],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["BACKGROUND", 1, true, "rgb(255, 255, 255)", true, 0, 0.25, 1, false, 1, [
                [
                    [48, 0, 0, 840, 816, 0, 0, 1, 0, 0], 39, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 168, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [72, 528, 0, 288, 144, 0, 0, 1, 0, 0], 38, [],
                    [],
                    [
                    0, 0, 0]
                ]
            ]],
            ["LEVELART", 2, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [864, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 96, 1344, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 672, 0, 48, 48, 0, 0, 1, 0, 0], 15, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1056, 0, 768, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 672, 0, 48, 48, 0, 0, 1, 0, 0], 17, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 864, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 48, 0, 768, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 864, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [288, 336, 0, 48, 48, 0, 0, 1, 0, 0], 22, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [336, 336, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 336, 0, 48, 48, 0, 0, 1, 0, 0], 24, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [360, 336, 0, 36, 48, 0, 0, 1, 0.5, 1], 8, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 336, 0, 36, 48, 0, 0, 1, 0.5, 1], 9, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, -456, 0, 60, 96, 0, 0, 1, 0.5, 0.5], 25, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 144, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 288, 0, 48, 48, 0, 0, 1, 0, 0], 42, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 624, 0, 264, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [864, 0, 0, 96, 1344, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 0, 0, 768, 48, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 1104, 0, 768, 240, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [552, 888, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [504, 888, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [456, 888, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 888, 0, 48, 48, 0, 0, 1, 0.5, 0.5], 44, [],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 1056, 0, 48, 12, 0, 0, 1, 0.5, 0.75], 45, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 864, 0, 240, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 864, 0, 240, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 672, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [624, 672, 0, 240, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 336, 0, 48, 48, 0, 0, 1, 0, 0], 23, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 336, 0, 192, 48, 0, 0, 1, 0, 0], 16, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 384, 0, 192, 96, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [384, 480, 0, 48, 48, 0, 0, 1, 0, 0], 18, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [528, 480, 0, 48, 48, 0, 0, 1, 0, 0], 20, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [432, 480, 0, 96, 48, 0, 0, 1, 0, 0], 19, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [576, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [528, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [432, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [672, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [624, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [336, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [288, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [240, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [144, 912, 0, 48, 24, 0, 3.14159, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [816, 1056, 0, 48, 24, 0, 0, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 720, 0, 48, 24, 0, 1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 768, 0, 48, 24, 0, 1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [384, 816, 0, 48, 24, 0, 1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 864, 0, 48, 24, 0, -1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 816, 0, 48, 24, 0, -1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 768, 0, 48, 24, 0, -1.5708, 1, 0, 1], 7, [
                    1],
                    [
                        []
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 720, 0, 288, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [96, 720, 0, 288, 144, 0, 0, 1, 0, 0], 14, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [648, 240, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [216, 336, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [480, 216, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [408, 144, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 144, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 312, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [576, 144, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 216, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 264, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [264, 480, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [648, 432, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [768, 480, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 384, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [792, 216, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [168, 432, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 624, 0, 264, 48, 0, 0, 1, 0, 0], 41, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [456, 600, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [600, 576, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [720, 576, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [192, 576, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [312, 576, 0, 36, 30, 0, 0, 1, 0.5, 0.4], 26, [],
                    [
                        [
                        0, 1, 8, 5, 0, 100, 20, 10]
                    ],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["CHARACTERS", 3, true, "rgb(255, 255, 255)", true, 1, 1, 1, false, 1, [
                [
                    [24, -408, 0, 48, 48, 0, 0, 1, 0.5, 0.479167], 4, ["right"],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [96, -408, 0, 48, 48, 0, 0, 1, 0.5, 0.5625], 5, ["left"],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]],
            ["FADE", 4, true, "rgb(255, 255, 255)", true, 0, 0, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ],
        ["EndScreen", 960, 640, false, "EndScreen Sheet", [
            ["Layer 0", 0, true, "rgb(255, 255, 255)", false, 1, 1, 1, false, 1, [
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 52, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [200, 64, 0, 560, 576, 0, 0, 1, 0, 0], 63, [],
                    [],
                    [
                    0, 0, 0]
                ],
                [
                    [480, 416, 0, 102, 63, 0, 0, 1, 0.5, 0.507937], 54, [],
                    [],
                    [
                    0, 0, 0, 0]
                ],
                [
                    [0, 0, 0, 960, 640, 0, 0, 1, 0, 0], 11, [
                    0, 0],
                    [],
                    [
                    0, 0, 0, 0]
                ]
            ]]
        ],
            []
        ]
    ], [
        ["Skeleton Sheet", [
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_spikes"],
            [
            2, "item_doors"],
            [
            2, "item_switcher"],
            [
            2, "item_box"],
            [
            0, null, [
                [
                3, cr.plugins_.Keyboard.prototype.cnds.OnKey, null, true, false, false, false, [
                    [
                    9, 66]
                ]]
            ],
                [
                    [
                    11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                        [
                        10, 0],
                        [
                        7, [
                        0, -1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                3, cr.plugins_.Keyboard.prototype.cnds.OnKey, null, true, false, false, false, [
                    [
                    9, 87]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "win_state"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                3, cr.plugins_.Keyboard.prototype.cnds.OnKey, null, true, false, false, false, [
                    [
                    9, 69]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "lose_state"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ]
        ]],
        ["Level 1 Sheet", [
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 1]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "follow_who"],
                        [
                        7, [
                        2, "him"]]
                    ]]
                ]
            ]
        ]],
        ["Level 2 Sheet", [
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_doors"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 2]]
                    ]]
                ]
            ]
        ]],
        ["Level 3 Sheet", [
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_doors"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 3]]
                    ]]
                ]
            ]
        ]],
        ["Level 4 Sheet", [
            [
            2, "item_spikes"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_doors"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 4]]
                    ]]
                ]
            ]
        ]],
        ["Level 5 Sheet", [
            [
            2, "item_spikes"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 5]]
                    ]]
                ]
            ]
        ]],
        ["char_movement", [
            [
            0, [true, "Character Movement"],
                [
                    [-1, cr.system_object.prototype.cnds.IsGroupActive, null, false, false, false, false, [
                        [
                        1, [
                        2, "Character Movement"]]
                    ]]
                ],
                [],
                [
                    [
                    0, null, [
                        [
                        1, cr.behaviors.Platform.prototype.cnds.IsFalling, "Platform", false, false, false, false]
                    ],
                        [],
                        [
                            [
                            0, null, [
                                [
                                4, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "left"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_right"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_left"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ]
                                ]
                            ],
                            [
                            0, null, [
                                [
                                4, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "right"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_left"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_right"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        1, cr.behaviors.Platform.prototype.cnds.IsOnFloor, "Platform", false, false, false, false]
                    ],
                        [],
                        [
                            [
                            0, null, [
                                [
                                4, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "left"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_right"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_left"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ]
                                ]
                            ],
                            [
                            0, null, [
                                [
                                4, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "right"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_left"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 4, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            4, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_right"]],
                                                [
                                                3, 1]
                                            ]]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        0, cr.behaviors.Platform.prototype.cnds.IsFalling, "Platform", false, false, false, false]
                    ],
                        [],
                        [
                            [
                            0, null, [
                                [
                                5, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "left"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_right"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_left"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ]
                                ]
                            ],
                            [
                            0, null, [
                                [
                                5, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "right"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_left"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "fall_right"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        0, cr.behaviors.Platform.prototype.cnds.IsOnFloor, "Platform", false, false, false, false]
                    ],
                        [],
                        [
                            [
                            0, null, [
                                [
                                5, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "left"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_right"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_left"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ]
                                ]
                            ],
                            [
                            0, null, [
                                [
                                5, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    2, "right"]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 180]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_left"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                                            [
                                            7, [
                                            20, 5, cr.plugins_.Sprite.prototype.exps.Angle, null]],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 0]]
                                        ]]
                                    ],
                                        [
                                            [
                                            5, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                                                [
                                                1, [
                                                2, "idle_right"]],
                                                [
                                                3, 0]
                                            ]]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        3, cr.plugins_.Keyboard.prototype.cnds.IsKeyDown, null, false, false, false, false, [
                            [
                            9, 37]
                        ]]
                    ],
                        [
                            [
                            1, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 0]
                            ]],
                            [
                            4, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                2, "left"]]
                            ]],
                            [
                            0, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 1]
                            ]],
                            [
                            5, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                2, "right"]]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        3, cr.plugins_.Keyboard.prototype.cnds.IsKeyDown, null, false, false, false, false, [
                            [
                            9, 39]
                        ]]
                    ],
                        [
                            [
                            1, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 1]
                            ]],
                            [
                            4, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                2, "right"]]
                            ]],
                            [
                            0, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 0]
                            ]],
                            [
                            5, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                2, "left"]]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        3, cr.plugins_.Keyboard.prototype.cnds.OnKey, null, true, false, false, false, [
                            [
                            9, 90]
                        ]],
                        [
                        1, cr.behaviors.Platform.prototype.cnds.IsOnFloor, "Platform", false, false, false, false],
                        [
                        0, cr.behaviors.Platform.prototype.cnds.IsOnFloor, "Platform", false, false, false, false]
                    ],
                        [
                            [
                            4, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]],
                            [
                            1, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]],
                            [
                            1, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                                [
                                0, [
                                6, [
                                22, 1, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                                    [
                                    0, -1]
                                ]]
                            ]],
                            [
                            51, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]],
                            [
                            5, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]],
                            [
                            0, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]],
                            [
                            0, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                                [
                                0, [
                                6, [
                                22, 0, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                                    [
                                    0, -1]
                                ]]
                            ]],
                            [
                            50, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                                [
                                0, [
                                0, 180]]
                            ]]
                        ]
                    ]
                ]
            ]
        ]],
        ["item_switcher", [
            [
            0, null, [
                [
                0, cr.plugins_.Sprite.prototype.cnds.OnCollision, null, false, false, false, true, [
                    [
                    4, 6]
                ]]
            ],
                [
                    [
                    5, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                        [
                        0, [
                        6, [
                        22, 0, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                            [
                            0, -1]
                        ]]
                    ]],
                    [
                    50, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                1, cr.plugins_.Sprite.prototype.cnds.OnCollision, null, false, false, false, true, [
                    [
                    4, 6]
                ]]
            ],
                [
                    [
                    4, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    1, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    1, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                        [
                        0, [
                        6, [
                        22, 1, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                            [
                            0, -1]
                        ]]
                    ]],
                    [
                    51, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]]
                ]
            ]
        ]],
        ["item_box", [
            [
            0, null, [
                [
                4, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, false, true, [
                    [
                    4, 10]
                ]],
                [
                4, cr.plugins_.Sprite.prototype.cnds.CompareY, null, false, false, false, false, [
                    [
                    8, 4],
                    [
                    0, [
                    20, 10, cr.plugins_.Sprite.prototype.exps.Y, null]]
                ]],
                [
                5, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, true, true, [
                    [
                    4, 10]
                ]]
            ],
                [],
                [
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                            [
                            7, [
                            20, 4, cr.plugins_.Sprite.prototype.exps.X, null]],
                            [
                            8, 4],
                            [
                            7, [
                            20, 10, cr.plugins_.Sprite.prototype.exps.X, null]]
                        ]]
                    ],
                        [
                            [
                            10, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 0]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.Compare, null, false, false, false, false, [
                            [
                            7, [
                            20, 4, cr.plugins_.Sprite.prototype.exps.X, null]],
                            [
                            8, 2],
                            [
                            7, [
                            20, 10, cr.plugins_.Sprite.prototype.exps.X, null]]
                        ]]
                    ],
                        [
                            [
                            10, cr.behaviors.Platform.prototype.acts.SimulateControl, "Platform", [
                                [
                                3, 1]
                            ]]
                        ]
                    ]
                ]
            ]
        ]],
        ["item_spikes", [
            [
            0, null, [
                [
                1, cr.plugins_.Sprite.prototype.cnds.OnCollision, null, false, false, false, true, [
                    [
                    4, 7]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "lose_state"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                0, cr.plugins_.Sprite.prototype.cnds.OnCollision, null, false, false, false, true, [
                    [
                    4, 7]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "lose_state"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ]
        ]],
        ["scene_management", [
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [
                    1, cr.plugins_.Sprite.prototype.acts.SetVisible, null, [
                        [
                        3, 0]
                    ]],
                    [
                    0, cr.plugins_.Sprite.prototype.acts.SetVisible, null, [
                        [
                        3, 0]
                    ]],
                    [
                    5, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    50, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                        [
                        0, [
                        6, [
                        22, 0, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                            [
                            0, -1]
                        ]]
                    ]],
                    [
                    46, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 8],
                        [
                        7, [
                        0, 0]]
                    ]],
                    [
                    46, cr.plugins_.Sprite.prototype.acts.SetAngle, null, [
                        [
                        0, [
                        20, 8, cr.plugins_.Sprite.prototype.exps.Angle, null]]
                    ]],
                    [
                    47, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 9],
                        [
                        7, [
                        0, 0]]
                    ]],
                    [
                    47, cr.plugins_.Sprite.prototype.acts.SetAngle, null, [
                        [
                        0, [
                        20, 9, cr.plugins_.Sprite.prototype.exps.Angle, null]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Character Movement"]],
                        [
                        3, 1]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "lose_state"],
                        [
                        7, [
                        0, 0]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "win_state"],
                        [
                        7, [
                        0, 0]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Heart Fade"]],
                        [
                        3, 0]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Screen Fade"]],
                        [
                        3, 1]
                    ]],
                    [
                    11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                        [
                        10, 0],
                        [
                        7, [
                        0, 1]]
                    ]],
                    [
                    26, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                        [
                        0, [
                        0, 15]]
                    ]],
                    [
                    26, cr.behaviors.Sin.prototype.acts.SetMagnitude, "Sine", [
                        [
                        0, [
                        0, 10]]
                    ]],
                    [
                    26, cr.behaviors.Sin.prototype.acts.SetPeriod, "Sine", [
                        [
                        0, [
                        0, 4]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "DELETING DOORS"]],
                        [
                        3, 0]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.EveryTick, null, false, false, false, false]
            ],
                [
                    [
                    4, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 1],
                        [
                        7, [
                        0, 1]]
                    ]],
                    [
                    5, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 0],
                        [
                        7, [
                        0, 1]]
                    ]],
                    [
                    51, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 1],
                        [
                        7, [
                        0, 2]]
                    ]],
                    [
                    50, cr.plugins_.Sprite.prototype.acts.SetPosToObject, null, [
                        [
                        4, 0],
                        [
                        7, [
                        0, 2]]
                    ]]
                ],
                [
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                            [
                            11, "follow_who"],
                            [
                            8, 0],
                            [
                            7, [
                            2, "him"]]
                        ]]
                    ],
                        [
                            [-1, cr.system_object.prototype.acts.ScrollToObject, null, [
                                [
                                4, 1]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                            [
                            11, "follow_who"],
                            [
                            8, 0],
                            [
                            7, [
                            2, "her"]]
                        ]]
                    ],
                        [
                            [-1, cr.system_object.prototype.acts.ScrollToObject, null, [
                                [
                                4, 0]
                            ]]
                        ]
                    ]
                ]
            ],
            [
            0, [true, "Screen Fade"],
                [
                    [-1, cr.system_object.prototype.cnds.IsGroupActive, null, false, false, false, false, [
                        [
                        1, [
                        2, "Screen Fade"]]
                    ]]
                ],
                [],
                [
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.EveryTick, null, false, false, false, false]
                    ],
                        [],
                        [
                            [
                            0, null, [
                                [
                                11, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    0, 1]]
                                ]]
                            ],
                                [
                                    [
                                    11, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                        [
                                        0, [
                                        5, [
                                        20, 11, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                            [
                                            6, [
                                            0, 200],
                                                [
                                                19, cr.system_object.prototype.exps.dt]
                                            ]
                                        ]]
                                    ]]
                                ]
                            ],
                            [
                            0, null, [
                                [
                                11, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    0, -1]]
                                ]]
                            ],
                                [
                                    [
                                    11, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                        [
                                        0, [
                                        4, [
                                        20, 11, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                            [
                                            6, [
                                            0, 250],
                                                [
                                                19, cr.system_object.prototype.exps.dt]
                                            ]
                                        ]]
                                    ]]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        11, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                            [
                            8, 0],
                            [
                            0, [
                            0, 0]]
                        ]]
                    ],
                        [
                            [
                            11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                0, 0]]
                            ]],
                            [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                                [
                                1, [
                                2, "Screen Fade"]],
                                [
                                3, 0]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        11, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                            [
                            8, 0],
                            [
                            0, [
                            0, 100]]
                        ]]
                    ],
                        [
                            [
                            11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                0, 0]]
                            ]]
                        ],
                        [
                            [
                            0, null, [
                                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                    [
                                    11, "lose_state"],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    0, 1]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 1]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 1"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 2]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 2"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 3]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 3"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 4]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 4"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 5]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 5"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 6]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 6"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 7]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 7"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 8]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 8"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 9]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 9"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 10]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 10"]
                                            ]]
                                        ]
                                    ]
                                ]
                            ],
                            [
                            0, null, [
                                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                    [
                                    11, "win_state"],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    0, 1]]
                                ]]
                            ],
                                [],
                                [
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 1]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 2"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 2]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 3"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 3]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 4"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 4]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 5"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 5]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 6"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 6]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 7"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 7]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 8"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 8]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 9"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 9]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "Level 10"]
                                            ]]
                                        ]
                                    ],
                                    [
                                    0, null, [
                                        [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                                            [
                                            11, "current_level"],
                                            [
                                            8, 0],
                                            [
                                            7, [
                                            0, 10]]
                                        ]]
                                    ],
                                        [
                                            [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                                                [
                                                6, "EndScreen"]
                                            ]]
                                        ]
                                    ]
                                ]
                            ]
                        ]
                    ]
                ]
            ],
            [
            0, [true, "Heart Fade"],
                [
                    [-1, cr.system_object.prototype.cnds.IsGroupActive, null, false, false, false, false, [
                        [
                        1, [
                        2, "Heart Fade"]]
                    ]]
                ],
                [],
                [
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.EveryTick, null, false, false, false, false]
                    ],
                        [
                            [
                            26, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                [
                                0, [
                                4, [
                                20, 26, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                    [
                                    6, [
                                    0, 50],
                                        [
                                        19, cr.system_object.prototype.exps.dt]
                                    ]
                                ]]
                            ]]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        26, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                            [
                            8, 0],
                            [
                            0, [
                            0, 100]]
                        ]]
                    ],
                        [
                            [-1, cr.system_object.prototype.acts.Wait, null, [
                                [
                                0, [
                                0, 1]]
                            ]],
                            [
                            11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                                [
                                10, 0],
                                [
                                7, [
                                0, -1]]
                            ]],
                            [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                                [
                                1, [
                                2, "Screen Fade"]],
                                [
                                3, 1]
                            ]]
                        ]
                    ]
                ]
            ],
            [
            0, null, [
                [
                8, cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying, null, false, false, false, false, [
                    [
                    1, [
                    2, "on"]]
                ]],
                [
                9, cr.plugins_.Sprite.prototype.cnds.IsAnimPlaying, null, false, false, false, false, [
                    [
                    1, [
                    2, "on"]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "win_state"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                51, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, false, true, [
                    [
                    4, 46]
                ]]
            ],
                [
                    [
                    8, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 0]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                50, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, false, true, [
                    [
                    4, 47]
                ]]
            ],
                [
                    [
                    9, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 0]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                51, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, true, true, [
                    [
                    4, 46]
                ]]
            ],
                [
                    [
                    8, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "off"]],
                        [
                        3, 0]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                50, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, true, true, [
                    [
                    4, 47]
                ]]
            ],
                [
                    [
                    9, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "off"]],
                        [
                        3, 0]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "lose_state"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Character Movement"]],
                        [
                        3, 0]
                    ]],
                    [
                    11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                        [
                        10, 0],
                        [
                        7, [
                        0, -1]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Screen Fade"]],
                        [
                        3, 1]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "win_state"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Character Movement"]],
                        [
                        3, 0]
                    ]],
                    [
                    4, cr.plugins_.Sprite.prototype.acts.StopAnim, null],
                    [
                    5, cr.plugins_.Sprite.prototype.acts.StopAnim, null],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "Heart Fade"]],
                        [
                        3, 1]
                    ]],
                    [
                    8, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 0]
                    ]],
                    [
                    9, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 0]
                    ]],
                    [
                    26, cr.behaviors.Sin.prototype.acts.SetActive, "Sine", [
                        [
                        3, 1]
                    ]]
                ]
            ]
        ]],
        ["Main Menu Sheet", [
            [
            1, "menu_animation", 0, 0],
            [
            1, "click_able", 0, 0],
            [
            1, "lose_state", 0, 0],
            [
            1, "win_state", 0, 0],
            [
            1, "current_level", 0, 0],
            [
            1, "follow_who", 1, "him"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [
                    57, cr.plugins_.TiledBg.prototype.acts.SetOpacity, null, [
                        [
                        0, [
                        0, 0]]
                    ]],
                    [-1, cr.system_object.prototype.acts.Wait, null, [
                        [
                        0, [
                        1, 0.5]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "menu_animation"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                13, cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, null, true, false, false, false, [
                    [
                    3, 0],
                    [
                    3, 0],
                    [
                    4, 12]
                ]],
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "click_able"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                        [
                        6, "Level 1"]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                13, cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, null, true, false, false, false, [
                    [
                    3, 0],
                    [
                    3, 0],
                    [
                    4, 53]
                ]],
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "click_able"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "menu_animation"],
                        [
                        7, [
                        0, 2]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                13, cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, null, true, false, false, false, [
                    [
                    3, 0],
                    [
                    3, 0],
                    [
                    4, 54]
                ]],
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "click_able"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "menu_animation"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "menu_animation"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 1]]
                ]]
            ],
                [
                    [
                    37, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 37, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 0],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 37, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 96],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    12, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 12, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 480],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 12, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 336],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    53, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 53, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 480],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 53, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 416],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    54, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 54, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 480],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 54, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 688],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    55, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 55, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 320],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 55, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 640],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    56, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 56, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 640],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 56, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 640],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    57, cr.plugins_.TiledBg.prototype.acts.SetOpacity, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 57, cr.plugins_.TiledBg.prototype.exps.Opacity, null],
                            [
                            0, 0],
                            [
                            6, [
                            0, 6],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "click_able"],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.CompareVar, null, false, false, false, false, [
                    [
                    11, "menu_animation"],
                    [
                    8, 0],
                    [
                    7, [
                    0, 2]]
                ]]
            ],
                [
                    [
                    37, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 37, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 0],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 37, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 24],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    54, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 54, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 480],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 54, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 592],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    55, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 55, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 268],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 55, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 640],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    56, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 56, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 692],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 56, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 640],
                            [
                            6, [
                            0, 2],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    12, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 12, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, -100],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 12, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 336],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    53, cr.plugins_.Sprite.prototype.acts.SetPos, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 53, cr.plugins_.Sprite.prototype.exps.X, null],
                            [
                            0, 1060],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]],
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 53, cr.plugins_.Sprite.prototype.exps.Y, null],
                            [
                            0, 416],
                            [
                            6, [
                            0, 3],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]],
                    [
                    57, cr.plugins_.TiledBg.prototype.acts.SetOpacity, null, [
                        [
                        0, [
                        19, cr.system_object.prototype.exps.lerp, [
                            [
                            20, 57, cr.plugins_.TiledBg.prototype.exps.Opacity, null],
                            [
                            0, 100],
                            [
                            6, [
                            0, 6],
                                [
                                19, cr.system_object.prototype.exps.dt]
                            ]
                        ]]]
                    ]]
                ]
            ]
        ]],
        ["item_doors", [
            [
            0, null, [
                [
                1, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, false, true, [
                    [
                    4, 45]
                ]]
            ],
                [
                    [
                    45, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 1]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "DELETING DOORS"]],
                        [
                        3, 1]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                0, cr.plugins_.Sprite.prototype.cnds.IsOverlapping, null, false, false, false, true, [
                    [
                    4, 45]
                ]]
            ],
                [
                    [
                    45, cr.plugins_.Sprite.prototype.acts.SetAnim, null, [
                        [
                        1, [
                        2, "on"]],
                        [
                        3, 1]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                        [
                        1, [
                        2, "DELETING DOORS"]],
                        [
                        3, 1]
                    ]]
                ]
            ],
            [
            0, [false, "DELETING DOORS"],
                [
                    [-1, cr.system_object.prototype.cnds.IsGroupActive, null, false, false, false, false, [
                        [
                        1, [
                        2, "DELETING DOORS"]]
                    ]]
                ],
                [],
                [
                    [
                    0, null, [
                        [-1, cr.system_object.prototype.cnds.EveryTick, null, false, false, false, false]
                    ],
                        [
                            [
                            44, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                [
                                0, [
                                5, [
                                20, 44, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                    [
                                    6, [
                                    0, 200],
                                        [
                                        19, cr.system_object.prototype.exps.dt]
                                    ]
                                ]]
                            ]]
                        ],
                        [
                            [
                            0, null, [
                                [
                                7, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                                    [
                                    10, 0],
                                    [
                                    8, 0],
                                    [
                                    7, [
                                    0, 1]]
                                ]]
                            ],
                                [
                                    [
                                    7, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                        [
                                        0, [
                                        5, [
                                        20, 7, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                            [
                                            6, [
                                            0, 200],
                                                [
                                                19, cr.system_object.prototype.exps.dt]
                                            ]
                                        ]]
                                    ]]
                                ]
                            ]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        44, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                            [
                            8, 3],
                            [
                            0, [
                            0, 0]]
                        ]]
                    ],
                        [
                            [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                                [
                                1, [
                                2, "DELETING DOORS"]],
                                [
                                3, 0]
                            ]],
                            [
                            44, cr.plugins_.Sprite.prototype.acts.Destroy, null]
                        ]
                    ],
                    [
                    0, null, [
                        [
                        7, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                            [
                            8, 3],
                            [
                            0, [
                            0, 0]]
                        ]]
                    ],
                        [
                            [-1, cr.system_object.prototype.acts.SetGroupActive, null, [
                                [
                                1, [
                                2, "DELETING DOORS"]],
                                [
                                3, 0]
                            ]],
                            [
                            7, cr.plugins_.Sprite.prototype.acts.Destroy, null]
                        ]
                    ]
                ]
            ]
        ]],
        ["Level 6 Sheet", [
            [
            2, "item_spikes"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_doors"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 6]]
                    ]]
                ]
            ]
        ]],
        ["Level 7 Sheet", [
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_doors"],
            [
            2, "item_spikes"],
            [
            2, "item_switcher"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 7]]
                    ]]
                ]
            ]
        ]],
        ["Level 8 Sheet", [
            [
            2, "item_switcher"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_spikes"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 8]]
                    ]]
                ]
            ]
        ]],
        ["Level 9 Sheet", [
            [
            2, "item_doors"],
            [
            2, "item_switcher"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_spikes"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 9]]
                    ]],
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "follow_who"],
                        [
                        7, [
                        2, "her"]]
                    ]]
                ]
            ]
        ]],
        ["Level 10 Sheet", [
            [
            2, "item_doors"],
            [
            2, "scene_management"],
            [
            2, "char_movement"],
            [
            2, "item_spikes"],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [-1, cr.system_object.prototype.acts.SetVar, null, [
                        [
                        11, "current_level"],
                        [
                        7, [
                        0, 10]]
                    ]],
                    [
                    5, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    50, cr.plugins_.Sprite.prototype.acts.RotateClockwise, null, [
                        [
                        0, [
                        0, 180]]
                    ]],
                    [
                    0, cr.behaviors.Platform.prototype.acts.SetGravity, "Platform", [
                        [
                        0, [
                        6, [
                        22, 0, "Platform", cr.behaviors.Platform.prototype.exps.Gravity, null],
                            [
                            0, -1]
                        ]]
                    ]],
                    [
                    26, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                        [
                        0, [
                        0, 0]]
                    ]]
                ]
            ]
        ]],
        ["EndScreen Sheet", [
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.EveryTick, null, false, false, false, false]
            ],
                [],
                [
                    [
                    0, null, [
                        [
                        11, cr.plugins_.Sprite.prototype.cnds.CompareInstanceVar, null, false, false, false, false, [
                            [
                            10, 0],
                            [
                            8, 0],
                            [
                            7, [
                            0, 1]]
                        ]]
                    ],
                        [
                            [
                            11, cr.plugins_.Sprite.prototype.acts.SetOpacity, null, [
                                [
                                0, [
                                5, [
                                20, 11, cr.plugins_.Sprite.prototype.exps.Opacity, null],
                                    [
                                    6, [
                                    0, 20],
                                        [
                                        19, cr.system_object.prototype.exps.dt]
                                    ]
                                ]]
                            ]]
                        ]
                    ]
                ]
            ],
            [
            0, null, [
                [
                11, cr.plugins_.Sprite.prototype.cnds.CompareOpacity, null, false, false, false, false, [
                    [
                    8, 0],
                    [
                    0, [
                    0, 0]]
                ]]
            ],
                [
                    [
                    11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                        [
                        10, 0],
                        [
                        7, [
                        0, 0]]
                    ]]
                ]
            ],
            [
            0, null, [
                [-1, cr.system_object.prototype.cnds.OnLayoutStart, null, true, false, false, false]
            ],
                [
                    [
                    11, cr.plugins_.Sprite.prototype.acts.SetInstanceVar, null, [
                        [
                        10, 0],
                        [
                        7, [
                        0, 1]]
                    ]]
                ]
            ],
            [
            0, null, [
                [
                13, cr.plugins_.Mouse.prototype.cnds.OnObjectClicked, null, true, false, false, false, [
                    [
                    3, 0],
                    [
                    3, 0],
                    [
                    4, 54]
                ]]
            ],
                [
                    [-1, cr.system_object.prototype.acts.GoToLayout, null, [
                        [
                        6, "Main Menu"]
                    ]]
                ]
            ]
        ]]
    ], "media/", true, 960, 640, false];
};